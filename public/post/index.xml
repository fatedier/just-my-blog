<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fatedier&#39;s blog </title>
    <link>http://blog.fatedier.com/post/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2015</rights>
    <updated>2014-11-24 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>linux shell中的条件判断</title>
          <link>http://blog.fatedier.com/2014/11/24/conditional-judgement-in-linux-shell</link>
          <pubDate>Mon, 24 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/11/24/conditional-judgement-in-linux-shell</guid>
          <description>

&lt;p&gt;在日常开发中经常需要编写一些简单的部署或者测试统计之类的脚本，直接用shell来编写几条命令就可以实现一些较为复杂的功能，十分方便。不过 linux shell 中的条件判断和其他编程语言略有不同，有一些需要特别注意的地方。&lt;/p&gt;

&lt;h3 id=&#34;退出状态:289ce1ced731ab87d58afb0f0a69b270&#34;&gt;退出状态&lt;/h3&gt;

&lt;p&gt;在Linux系统中，每当一条命令执行完成后，系统都会返回一个退出状态，这个状态被存放在$? 这个变量中，是一个整数值，我们可以根据这个值来判断命令运行的结果是否正确。&lt;/p&gt;

&lt;p&gt;通常情况下，退出状态值为0，表示执行成功，不为0的时候表示执行失败。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;POSIX规定的退出状态和退出状态的含义&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;0 （运行成功）&lt;/p&gt;

&lt;p&gt;1-255 （运行失败，脚本命令、系统命令错误或参数传递错误）&lt;/p&gt;

&lt;p&gt;126 （找到了该命令但无法执行）&lt;/p&gt;

&lt;p&gt;127 （未找到要运行的命令）&lt;/p&gt;

&lt;p&gt;128 （命令被系统强行结束）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;测试命令:289ce1ced731ab87d58afb0f0a69b270&#34;&gt;测试命令&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;test expression&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;用test命令进行测试，expression是一个表达式&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[ expression ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;为了提高可读性，可以使用简化的这种格式&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;需要注意的是大括号和表达式之间需要有一个空格，不能省略。这种方式和if、case、while等语句结合，可以作为shell脚本中的判断条件。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;整数比较运算符:289ce1ced731ab87d58afb0f0a69b270&#34;&gt;整数比较运算符&lt;/h3&gt;

&lt;p&gt;在shell中对两个数进行比较，不像在C/C++中可以使用 &amp;ldquo;&amp;gt;&amp;rdquo; 之类的运算符，而是使用类似参数选项的格式。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-eq  # 如果等于则为真
-ge  # 如果大于或等于则为真
-gt  # 如果大于则为真
-le  # 如果小于或等于则为真
-lt  # 如果小于则为真
-ne  # 如果不等于则为真
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;其中的参数可以这样理解e(equal)，g(greater)，t(than)，l(less)，n(not)，这样方便记忆。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;字符串相关运算符:289ce1ced731ab87d58afb0f0a69b270&#34;&gt;字符串相关运算符&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-n string            # 字符串不为空则为真
-z string            # 字符串为空则为真
string1 = string2    # 字符串相等则为真 （或者 == 也可以）
string1 != string2   # 字符串不等则为真
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;这里有一个需要注意的地方，就是使用 -n 这个运算符进行判断的时候需要注意在变量两边加上双引号。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例如 if [ -n $string ] 应该写成 if [ -n “$string” ] ，不然该表达式总是会返回真，因为当string变量为空的时候就相当于是 if [ -n ]。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;文件操作符:289ce1ced731ab87d58afb0f0a69b270&#34;&gt;文件操作符&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-d file # 测试file是否为目录
-e file # 测试file是否存在
-f file # 测试file是否为普通文件
-r file # 测试file是否是进程可读文件
-s file # 测试file的长度是否不为0
-w file # 测试file是否是进程可写文件
-x file # 测试file是否是进程可执行文件
-L file # 测试file是否符号化链接
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;逻辑运算符:289ce1ced731ab87d58afb0f0a69b270&#34;&gt;逻辑运算符&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;! expression                # 非
expression1 -a expression2  # 与
expression1 -o expression2  # 或
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多重的嵌套 &lt;code&gt;if [ $a == 1 ] &amp;amp;&amp;amp; [ $b == 1 -o $b == 3 ]&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>能否被8整除</title>
          <link>http://blog.fatedier.com/2014/11/13/can-be-divisible-by-eight</link>
          <pubDate>Thu, 13 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/11/13/can-be-divisible-by-eight</guid>
          <description>

&lt;p&gt;题目：给定一个非负整数，问能否重排它的全部数字，使得重排后的数能被8整除。 输入格式： 多组数据，每组数据是一个非负整数。非负整数的位数不超过10000位。 输出格式 每组数据输出一行,YES或者NO，表示能否重排它的全部数字得到能被8整除的数。注意：重排可以让0开头。&lt;/p&gt;

&lt;h3 id=&#34;思路:82c26b45de3ed5f70b38a0a9fc49fa75&#34;&gt;思路&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;考虑到64位整型可以直接取余8求得结果，所以当输入非负整数位数小于20位的时候，可以直接转换成64位整型进行计算。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于一个非负整数，最后四位相当于是 p*1000 + x*100 + y*10 + z ，可以很显然的看出p*1000必然能被8整除，所以一个非负整数只需要后三位能被8整除，那么这个数就一定能被8整除。所以如果我们能从这个数中任意取出三位，作为最后三位，其值能被8整除，就输出YES，否则NO。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;没必要对可能的10000位做全排列，因为0-9每个数最多只能用3次，我们只需要遍历一遍每一位，将0-9出现的次数记录下来，最多允许记录3次。这样最坏的情况下需要对30个数进行全排列即可，效率会非常高。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;代码:82c26b45de3ed5f70b38a0a9fc49fa75&#34;&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;

#define MAX 10001

int has_num[10];    //0-9在这个数中出现的次数

bool check()
{
    int deal_num[30];   //0-9每个数最多可以用3次，只需要30的空间
    int n = 0;
    //将所有出现过数依次存放在deal_num数组中
    for (int i=0; i&amp;lt;10; i++) {
        for (int j=0; j&amp;lt;has_num[i]; j++) {
            deal_num[n] = i;
            n++;
        }
    }

    //排列任意三个数组成一个整数，其值能被8整除，返回true，否则false
    for (int i=0; i&amp;lt;n; i++) {
        for (int j=0; j&amp;lt;n; j++) {
            if (j == i)
                continue;
            for (int k=0; k&amp;lt;n; k++) {
                if (k == i || k == j) {
                    continue;
                }
                if ((deal_num[i]*100 + deal_num[j]*10 + deal_num[k]) % 8 == 0)
                    return true;
            }
        }
    }
    return false;
}

int main()
{
    char str_num[MAX];  //用于保存不超过10000位的整数
    int n;
    long long temp = 0; //如果位数小于等于19，直接转换为64位整型

    for (;;) {
        memset(str_num, 0, sizeof(str_num));
        for (int i=0; i&amp;lt;10; i++) {
            has_num[i] = 0;
        }
        if (scanf(&amp;quot;%s&amp;quot;, &amp;amp;str_num) == 1) {
            n = strlen(str_num);
            //转换为64位整型
            if (n &amp;lt;= 19) {
                sscanf(str_num, &amp;quot;%lld&amp;quot;, &amp;amp;temp);
                if ((temp % 8) == 0)
                    printf(&amp;quot;YES\n&amp;quot;);
                else
                    printf(&amp;quot;NO\n&amp;quot;);
                continue;
            }
            
            //将0-9出现的次数保存在has_num数组中，最多3次
            for (int i=0; i&amp;lt;n; i++) {
                if (has_num[(int)str_num[i] - 48] &amp;lt; 3)
                    has_num[(int)str_num[i] - 48]++;
            }
            if (check())
                printf(&amp;quot;YES\n&amp;quot;);
            else
                printf(&amp;quot;NO\n&amp;quot;);
            continue;

        } else {
            break;
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>使用astyle进行代码格式化</title>
          <link>http://blog.fatedier.com/2014/11/10/use-astyle-to-format-code</link>
          <pubDate>Mon, 10 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/11/10/use-astyle-to-format-code</guid>
          <description>

&lt;p&gt;在参与团队的开发的时候，由于平台和编写代码的工具的不同等等问题，经常会遇到代码格式非常混乱的情况，严重影响了代码的阅读效率。后来发现了一款比较好的工具 &amp;ndash; &amp;ldquo;astyle&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;astyle这个工具可以将现有的代码格式转换为指定的风格，当你将乱七八糟的代码用astyle转换一下之后，就会感觉整个世界都清静了……&lt;/p&gt;

&lt;h3 id=&#34;如何获取:699e4d34b5ad72c6fd24a2cffb5c24a4&#34;&gt;如何获取&lt;/h3&gt;

&lt;p&gt;astyle是一个开放源码的项目，支持C/C++、C#和java的代码格式化&lt;/p&gt;

&lt;p&gt;SourceForge地址: &lt;a href=&#34;http://sourceforge.net/projects/astyle/&#34;&gt;http://sourceforge.net/projects/astyle/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我的Github拷贝: &lt;a href=&#34;https://github.com/fatedier/fatedier-tools/tree/master/astyle&#34;&gt;https://github.com/fatedier/fatedier-tools/tree/master/astyle&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;编译:699e4d34b5ad72c6fd24a2cffb5c24a4&#34;&gt;编译&lt;/h3&gt;

&lt;p&gt;直接写一个Makefile编译下源码，我的Github的拷贝里有写好的Makefile，直接用gmake命令编译一下就可以用了。&lt;/p&gt;

&lt;h3 id=&#34;示例:699e4d34b5ad72c6fd24a2cffb5c24a4&#34;&gt;示例&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;./astyle --style=ansi test.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;执行之后会提示&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Formatted  xxx/test.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;astyle&lt;/strong&gt; 会在当前目录下生成一个备份文件，以 &lt;strong&gt;.orig&lt;/strong&gt; 结尾，例如 &amp;ldquo;test.cpp.orig&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;而 &lt;strong&gt;test.cpp&lt;/strong&gt; 就已经转换为了 &lt;strong&gt;ansi&lt;/strong&gt; 代码风格了。&lt;/p&gt;

&lt;h3 id=&#34;常用选项:699e4d34b5ad72c6fd24a2cffb5c24a4&#34;&gt;常用选项&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;注：使用 &amp;ndash;help 选项可以查看astyle的帮助文档&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;style风格设置:699e4d34b5ad72c6fd24a2cffb5c24a4&#34;&gt;style风格设置&lt;/h4&gt;

&lt;p&gt;常用的代码风格主要有三种: &lt;strong&gt;ansi&lt;/strong&gt; 和 &lt;strong&gt;k&amp;amp;r&lt;/strong&gt; 以及 &lt;strong&gt;java&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&amp;ndash;style=allman  OR &amp;ndash;style=ansi OR &amp;ndash;style=bsd OR &amp;ndash;style=break OR -A1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int Foo()
{
   if (isBar)
    {
       bar();
       return 1;
    }
   else
    {
       return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ndash;style=kr OR &amp;ndash;style=k&amp;amp;r OR &amp;ndash;style=k/r OR -A3&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int Foo()
{
   if (isBar) {
       bar();
       return 1;
    }else {
       return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ndash;style=java OR &amp;ndash;style=attach OR -A2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int Foo() {
   if (isBar) {
       bar();
       return 1;
    }else {
       return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;tab选项:699e4d34b5ad72c6fd24a2cffb5c24a4&#34;&gt;Tab选项&lt;/h4&gt;

&lt;p&gt;默认是使用4个空格替换一个tab。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&amp;ndash;indent=spaces=# OR -s#&lt;/p&gt;

&lt;p&gt;指定用几个空格替换一个tab，例如 &amp;ndash;indent=spaces=8 ，指定用8个空格替换一个tab。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ndash;indent=tab OR &amp;ndash;indent=tab=# OR -t OR -t#&lt;/p&gt;

&lt;p&gt;指定缩进使用tab，=#同上，指定一个tab占几个空格，不说明的话默认是4个。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;递归处理:699e4d34b5ad72c6fd24a2cffb5c24a4&#34;&gt;递归处理&lt;/h4&gt;

&lt;p&gt;&amp;ndash;recursive OR -r OR -R&lt;/p&gt;

&lt;p&gt;可以递归处理所有子目录的文件。&lt;/p&gt;

&lt;h4 id=&#34;排除不处理的文件:699e4d34b5ad72c6fd24a2cffb5c24a4&#34;&gt;排除不处理的文件&lt;/h4&gt;

&lt;p&gt;&amp;ndash;exclude=####&lt;/p&gt;

&lt;p&gt;指定哪些文件或者文件夹不需要进行处理。&lt;/p&gt;

&lt;h4 id=&#34;指定配置文件:699e4d34b5ad72c6fd24a2cffb5c24a4&#34;&gt;指定配置文件&lt;/h4&gt;

&lt;p&gt;&amp;ndash;options=####&lt;/p&gt;

&lt;p&gt;可以指定读取某个文件的内容作为参数选项。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Linux下如何进行文件编码格式转换</title>
          <link>http://blog.fatedier.com/2014/11/03/how-to-convert-file-encoding-format-on-linux</link>
          <pubDate>Mon, 03 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/11/03/how-to-convert-file-encoding-format-on-linux</guid>
          <description>

&lt;p&gt;最近把项目放到github上，但是发现代码中注释的中文部分有些是乱码，检查后发现是因为我的Centos装在虚拟机上，而我是在Windows环境下通过UE来写代码的，而UE默认是使用ASCII编码。为了避免在UE里对一个个文件进行手动修改，希望在Linux上使用命令来批量转换编码格式。&lt;/p&gt;

&lt;p&gt;查了资料后发现可以使用 &lt;code&gt;iconv&lt;/code&gt; 命令。&lt;/p&gt;

&lt;p&gt;首先使用 &lt;code&gt;file&lt;/code&gt; 命令来检测文件的类型&lt;/p&gt;

&lt;p&gt;例如：&lt;code&gt;filetest.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;输出：&lt;code&gt;ISO-8859 Cprogram text&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;iconv命令的参数说明:4b6e91e70ba8114fa93e8a42dc052691&#34;&gt;iconv命令的参数说明&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;-l 列出所有已知的字符集&lt;/li&gt;
&lt;li&gt;-f 原始文本编码&lt;/li&gt;
&lt;li&gt;-t 输出文本编码&lt;/li&gt;
&lt;li&gt;-o 输出文件名&lt;/li&gt;
&lt;li&gt;-s 关闭警告&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;例子:4b6e91e70ba8114fa93e8a42dc052691&#34;&gt;例子&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;iconv -f GB2312 -t UTF-8 test.cpp &amp;gt; test_utf.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因为iconv默认输出到标准输出，所以我们需要重定向到一个其他文件。&lt;strong&gt;（这里不能重定向到自身，否则会清空文件内容）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果想要把输出内容直接输出到当前文件，可以这样用：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;iconv -f GB2312 -t UTF-8 -o test.cpp test.cpp&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;附上我自己用的编码转换脚本-iconvfa-sh:4b6e91e70ba8114fa93e8a42dc052691&#34;&gt;附上我自己用的编码转换脚本 iconvfa.sh&lt;/h3&gt;

&lt;h4 id=&#34;使用说明:4b6e91e70ba8114fa93e8a42dc052691&#34;&gt;使用说明&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Usage:
    iconvfa.sh [option] [file|dir]
    from GB2312 to UTF-8, the old file will be replaced by the new converted file

Options:
    -R: convert files recursively, the following parameter should be the directory name
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;脚本代码:4b6e91e70ba8114fa93e8a42dc052691&#34;&gt;脚本代码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/env bash

function show_help
{
    echo &amp;quot;Usage:&amp;quot;
    echo &amp;quot;  iconvfa.sh [option] [file|dir]&amp;quot;
    echo -e &amp;quot;  from GB2312 to UTF-8, the old file will be replaced by the new converted file\n&amp;quot;
    echo &amp;quot;Options:&amp;quot;
    echo &amp;quot;  -R: convert files recursively, the following parameter should be the directory name&amp;quot;
}

# param 1: directory name
function convert_rescursive()
{
   local dir_path=`echo $1 | sed &#39;s/\(.*\)\/$/\1/g&#39;`
   local dir_names=`ls ${dir_path} -l | awk &#39;/^d/{print $NF}&#39;`
   
   # convert files in this directory
   local file_names=`ls ${dir_path} -l | awk &#39;/^-/{print $NF}&#39;`
   for file in ${file_names}
   do
       iconv -f ${from_code} -t ${to_code} ${dir_path}/${file} &amp;amp;&amp;gt; /dev/null
       if [ $? == 0 ]; then
           iconv -f ${from_code} -t ${to_code} &amp;lt; ${dir_path}/${file} &amp;gt; $@.$$$$
           cp $@.$$$$ ${dir_path}/${file}
           rm -f $@.$$$$
           echo &amp;quot;File ${dir_path}/${file} is formatted.&amp;quot;
       fi
   done

   # if the directory has no other directory, return 0
   if [ &amp;quot;${dir_names}X&amp;quot; == &amp;quot;X&amp;quot; ]; then
       return 0
   fi

   # continue convert files in directories recursively
   for dir in ${dir_names}
   do
       convert_rescursive &amp;quot;${dir_path}/${dir}&amp;quot;
   done 
}

# defines
from_code=&amp;quot;GB2312&amp;quot;
to_code=&amp;quot;UTF-8&amp;quot;

case &amp;quot;$1&amp;quot; in
&amp;quot;-R&amp;quot;)
    ls $2 &amp;amp;&amp;gt; /dev/null
    if [ $? != 0 -o &amp;quot;$2X&amp;quot; == &amp;quot;X&amp;quot; ]; then
        echo &amp;quot;#### error: please check the directory name following the &#39;-R&#39; option!&amp;quot;
        exit 1
    fi
    convert_rescursive $2
    ;;
&amp;quot;&amp;quot;)
    show_help
    ;;
*)
    iconv -f ${from_code} -t ${to_code} $1 &amp;amp;&amp;gt; /dev/null
    if [ $? == 0 ]; then
        iconv -f ${from_code} -t ${to_code} &amp;lt; $1 &amp;gt; $@.$$$$
        cp $@.$$$$ $1
        rm -f $@.$$$$
        echo &amp;quot;File $1 is formatted.&amp;quot;
    else
        echo &amp;quot;Convert wrong!&amp;quot;
    fi
    ;;
esac
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>使用Vim打造自己的IDE</title>
          <link>http://blog.fatedier.com/2014/10/29/use-vim-to-make-my-ide</link>
          <pubDate>Wed, 29 Oct 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/10/29/use-vim-to-make-my-ide</guid>
          <description>

&lt;p&gt;之前一直使用UE的FTP功能编辑Linux虚拟机上的代码文件，之后再切换到Linux上去编译，调试程序，感觉这样比较麻烦，而且UE的功能也不像VS以及Eclipse的IDE那样强大，所以就查阅了一些资料，想要把Linux下最常用的文本编辑工具Vim打造成一个适合自己的IDE，可以直接ssh登陆到远程机器上直接进行开发。&lt;/p&gt;

&lt;p&gt;配置自己的Vim过程中参考了以下的blog和文档：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/fbfsber008/article/details/7055842&#34;&gt;http://blog.csdn.net/fbfsber008/article/details/7055842&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.douban.com/note/257815917/&#34;&gt;http://www.douban.com/note/257815917/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vim-scripts/vundle&#34;&gt;https://github.com/vim-scripts/vundle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最终的效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.fatedier.com/pic/2014/2014-10-29-use-vim-to-make-my-ide-overview.jpg&#34; alt=&#34;overview&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;现在把整个配置的过程记录下来，方便以后参考。&lt;/p&gt;

&lt;h3 id=&#34;前期准备:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;前期准备&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;有一个github帐号&lt;/li&gt;
&lt;li&gt;Linux上安装git版本控制工具，可以使用命令安装，例如 yum install git&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;github是一个好地方，不仅可以浏览很多的开源程序，而且可以把自己正在开发的项目或者有用的文档托管在上面，不管在其他任何的计算机上都可以很容易的获取到。&lt;/p&gt;

&lt;p&gt;比如我的 .vimrc 的配置文件就放在了Github上，有一个版本库是专门用来存放配置文件的。&lt;/p&gt;

&lt;p&gt;地址为：&lt;a href=&#34;https://github.com/fatedier/dot_file&#34;&gt;https://github.com/fatedier/dot_file&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;vim常用配置:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;vim常用配置&lt;/h3&gt;

&lt;p&gt;个人的vim配置文件一般是放在用户主目录下的.vimrc文件。&lt;/p&gt;

&lt;p&gt;配置文件中 &lt;code&gt;&amp;quot;&lt;/code&gt; 之后的部分都被当作注释。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if v:lang =~ &amp;quot;utf8$&amp;quot; || v:lang =~&amp;quot;UTF-8$&amp;quot;
    set fileencodings=ucs-bom,utf-8,latin1
endif
       
set nocompatible            &amp;quot; Use Vim defaults (much better!)
set bs=indent,eol,start     &amp;quot; allow backspacing overeverything in insert mode
set viminfo=&#39;20,\&amp;quot;50        &amp;quot; read/write a .viminfo file, don&#39;t store more
                            &amp;quot; than 50 lines of registers
set history=50              &amp;quot; keep 50 lines of command line history
set ruler                   &amp;quot; show the cursor position all the time
                                    
&amp;quot; -----------个人设置-----------
filetype off

set ts=4          &amp;quot; tab所占空格数
set shiftwidth=4  &amp;quot; 自动缩进所使用的空格数
set expandtab     &amp;quot; 用空格替换tab
set autoindent    &amp;quot; 自动缩进
set smartindent   &amp;quot; C语言缩进
set number        &amp;quot; 显示行号
set ignorecase    &amp;quot; 搜索忽略大小写
set incsearch     &amp;quot; 输入字符串就显示匹配点
set showtabline=2 &amp;quot; 总是显示标签页
                                      
if has(&amp;quot;mouse&amp;quot;)
    set mouse=iv  &amp;quot; 在 insert 和 visual 模式使用鼠标定位
endif
      
&amp;quot; -------------颜色配置-------------
&amp;quot; 补全弹出窗口
hi Pmenu ctermbg=light magenta
&amp;quot; 补全弹出窗口选中条目
hi PmenuSel ctermbg=yellow ctermfg=black
       
&amp;quot; -------------键盘映射-------------
&amp;quot; Ctrl+S 映射为保存
nnoremap &amp;lt;C-S&amp;gt; :w&amp;lt;CR&amp;gt;
inoremap &amp;lt;C-S&amp;gt;&amp;lt;Esc&amp;gt;:w&amp;lt;CR&amp;gt;a
        
&amp;quot; Ctrl+C 复制，Ctrl+V 粘贴
inoremap &amp;lt;C-C&amp;gt; y
inoremap &amp;lt;C-V&amp;gt; &amp;lt;Esc&amp;gt;pa
vnoremap &amp;lt;C-C&amp;gt; y
vnoremap &amp;lt;C-V&amp;gt; p
nnoremap &amp;lt;C-V&amp;gt; p

&amp;quot; F3 查找当前高亮的单词
inoremap &amp;lt;F3&amp;gt;*&amp;lt;Esc&amp;gt;:noh&amp;lt;CR&amp;gt;:match Todo /\k*\%#\k*/&amp;lt;CR&amp;gt;v
vnoremap &amp;lt;F3&amp;gt;*&amp;lt;Esc&amp;gt;:noh&amp;lt;CR&amp;gt;:match Todo /\k*\%#\k*/&amp;lt;CR&amp;gt;v

&amp;quot; Ctrl+\ 取消缩进
inoremap &amp;lt;C-\&amp;gt; &amp;lt;Esc&amp;gt;&amp;lt;&amp;lt;i
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用vundle管理vim插件:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;使用vundle管理vim插件&lt;/h3&gt;

&lt;p&gt;很多时候我们的vim都需要安装大量的插件，需要进行各种配置，而且插件路径下面的文件也会变的非常混乱，这个时候使用 &lt;strong&gt;vundle&lt;/strong&gt; 就是一个不错的选择。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/vim-scripts/vundle&#34;&gt;vundle&lt;/a&gt; 是可以算是一个用来管理各种vim插件的插件。&lt;/p&gt;

&lt;h4 id=&#34;安装ctags:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;安装ctags&lt;/h4&gt;

&lt;p&gt;直接使用命令 yuminstall ctags 进行安装。&lt;/p&gt;

&lt;p&gt;之后在你的项目文件的根目录中执行如下的命令：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ ctags -R&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;会发现当前目录下生成了一个名为tags的文件。&lt;/p&gt;

&lt;p&gt;tags文件是由ctags程序产生的一个索引文件，如果你在读程序时看了一个函数调用, 或者一个变量, 或者一个宏等等, 你想知道它们的定义在哪儿，tags文件就起作用了。使用把光标移动到你想查的地方，按下&amp;rdquo;Ctrl + ]&amp;ldquo;，就可以跳转到定义处。&lt;/p&gt;

&lt;p&gt;最后需要在vim配置文件中将tags文件加入到vim中来：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;set tags=~/tags&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：这里需要填具体的tags文件所在路径。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;先安装vundle这个插件:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;先安装vundle这个插件&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后其他的插件也都会被放在~/.vim/bundle这个目录下。&lt;/p&gt;

&lt;h4 id=&#34;安装其他需要的插件:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;安装其他需要的插件&lt;/h4&gt;

&lt;p&gt;以后当你需要安装其他的vim插件的时候，直接在.vimrc中加上如下部分：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;filetype off
 
setrtp+=~/.vim/bundle/vundle/
call vundle#rc()
&amp;quot; Bundles
&amp;quot; 显示变量、函数列表等
Bundle&amp;quot;taglist.vim&amp;quot;
&amp;quot; 窗口管理器
Bundle&amp;quot;winmanager&amp;quot;
&amp;quot; 标签工具
Bundle&amp;quot;Visual-Mark&amp;quot;
&amp;quot; 代码补全工具
Bundle&amp;quot;neocomplcache&amp;quot;
  
filetype pluginindent on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bundle 后面的插件名称用引号引起来，最后在vim中输入:BundleInstall就会完成自动安装，实际上是也是从github上下载各种插件，因为大多数的插件已经备份在了github上的vim-scripts上。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:PluginSearch&lt;/code&gt; 命令可以查看有哪些插件可以直接使用插件名下载的。&lt;/p&gt;

&lt;p&gt;如果你需要的插件在这个里面没有找到，那么在.vimrc配置文件中可以直接用git远程仓库的地址，例如要安装command-t这个插件，可以在配置文件中加上：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bundle &amp;quot;git://git.wincent.com/command-t.git&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样就会直接从这个地址上下载所需插件。&lt;/p&gt;

&lt;h3 id=&#34;其他插件的配置与使用:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;其他插件的配置与使用&lt;/h3&gt;

&lt;h4 id=&#34;快速浏览源码-taglist:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;快速浏览源码：TagList&lt;/h4&gt;

&lt;p&gt;在Windows平台我经常用来浏览项目源码的工具就是SourceInsight，会在窗口左边列出当前文件中的变量、宏、函数名等等，点击以后就会快速跳转到页面相应的地方，使用taglist就可以在vim中实现相同的效果。&lt;/p&gt;

&lt;p&gt;通过vundle安装完成后，在vim中使用 &lt;code&gt;:Tlist&lt;/code&gt; 命令就可以打开TagList窗口。&lt;/p&gt;

&lt;h4 id=&#34;窗口管理器-winmanager:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;窗口管理器：WinManager&lt;/h4&gt;

&lt;p&gt;WinManager可以帮助我们管理在屏幕上显示的多个窗口。&lt;/p&gt;

&lt;p&gt;之后我们需要设置一下在normal模式下可以直接输入wm来打开文件管理窗口以及TagList，.vimrc文件增加如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;let g:winManagerWindowLayout=&#39;FileExplorer|TagList&#39;
nnoremap wm:WMToggle&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注：nnoremap是设置键盘映射。第一个字母n是normal模式，i是insert模式，v是visual模式。加上nore表示不会递归替换命令，比如a映射到b，b映射到c，那么按a不会得到按c的效果。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;高亮标签-visualmark:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;高亮标签：VisualMark&lt;/h4&gt;

&lt;p&gt;这个插件的作用就是在浏览代码的时候在指定的行上添加标签，之后可以快速跳转回来，方便快捷。&lt;/p&gt;

&lt;p&gt;安装完成之后直接就可以在vim中使用。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;mm&amp;rdquo; 命令会在当前行添加标签，再次按 &amp;ldquo;mm&amp;rdquo; 会取消标签。&lt;/p&gt;

&lt;p&gt;按下“F2”可以在多个标签之间进行快速跳转。&lt;/p&gt;

&lt;h4 id=&#34;自动补全-neocomplcache:5aab60ddb89ca762ffb1e8e903792c73&#34;&gt;自动补全：neocomplcache&lt;/h4&gt;

&lt;p&gt;这个补全插件需要tags文件的支持，所以需要安装ctags，并且在项目根目录生成tags文件，之后在.vimrc中加入这个tags文件。&lt;/p&gt;

&lt;p&gt;并且在配置文件中加上如下配置：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let g:neocomplcache_enable_at_startup = 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这一行是设置是否自动启用补全，为1代表启用。这样就不需要每次都使用Ctrl+P或者Ctrl+N来弹出补全列表。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let g:neocomplcache_enable_auto_select = 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这一行是设置是否启用自动选择，为1代表启用。这个时候弹出补全列表的时候会自动选择第一个，按下Enter键就会使用列表的第一项，否则每一次都需要自己多按一次进行选择。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>vimdiff常用命令</title>
          <link>http://blog.fatedier.com/2014/10/24/vimdiff-common-commands</link>
          <pubDate>Fri, 24 Oct 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/10/24/vimdiff-common-commands</guid>
          <description>

&lt;p&gt;整理了一下在使用vimdiff进行文件合并的时候用到的一些常用的命令，方便以后查询。&lt;/p&gt;

&lt;p&gt;可以有多种方式使用vimdiff，例如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vimdiff [file1] [file2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vim -d [file1] [file2]&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;其他的一些的编辑命令与vim相同，这里主要记录一些常用的合并文件需要用到的命令：&lt;/p&gt;

&lt;h4 id=&#34;ctrl-w之后按w:9aefac86470ffbb6f4e11b956b035fae&#34;&gt;Ctrl+w之后按w&lt;/h4&gt;

&lt;p&gt;可以切换到另外一个文件&lt;/p&gt;

&lt;h4 id=&#34;c:9aefac86470ffbb6f4e11b956b035fae&#34;&gt;[c&lt;/h4&gt;

&lt;p&gt;跳转到上一个差异点&lt;/p&gt;

&lt;h4 id=&#34;c-1:9aefac86470ffbb6f4e11b956b035fae&#34;&gt;]c&lt;/h4&gt;

&lt;p&gt;跳转到下一个差一点&lt;/p&gt;

&lt;h4 id=&#34;zo或者i:9aefac86470ffbb6f4e11b956b035fae&#34;&gt;zo或者i&lt;/h4&gt;

&lt;p&gt;展开折叠区域，或者使用i进入插入模式也会进行展开&lt;/p&gt;

&lt;h4 id=&#34;zc:9aefac86470ffbb6f4e11b956b035fae&#34;&gt;zc&lt;/h4&gt;

&lt;p&gt;重新折叠，可以把使用zo展开折叠的区域恢复原样&lt;/p&gt;

&lt;h4 id=&#34;dp-diff-put的意思:9aefac86470ffbb6f4e11b956b035fae&#34;&gt;dp（diff put的意思）&lt;/h4&gt;

&lt;p&gt;把当前文件的差异点内容复制到另一个文件&lt;/p&gt;

&lt;h4 id=&#34;do-diff-obtain的意思:9aefac86470ffbb6f4e11b956b035fae&#34;&gt;do（diff obtain的意思）&lt;/h4&gt;

&lt;p&gt;把另一个文件的差异点内容复制到当前文件&lt;/p&gt;

&lt;h4 id=&#34;diffupdate:9aefac86470ffbb6f4e11b956b035fae&#34;&gt;:diffupdate&lt;/h4&gt;

&lt;p&gt;有时候修改了文件之后不会立即刷新重新比对，使用该命令可以重新进行文件比较。&lt;/p&gt;

&lt;h4 id=&#34;qa:9aefac86470ffbb6f4e11b956b035fae&#34;&gt;qa&lt;/h4&gt;

&lt;p&gt;退出所有打开的文件，但是不保存&lt;/p&gt;

&lt;h4 id=&#34;wqa:9aefac86470ffbb6f4e11b956b035fae&#34;&gt;wqa&lt;/h4&gt;

&lt;p&gt;退出并保存所有已打开的文件&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Git常用命令</title>
          <link>http://blog.fatedier.com/2014/10/17/git-usually-command</link>
          <pubDate>Fri, 17 Oct 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/10/17/git-usually-command</guid>
          <description>

&lt;p&gt;在用Git进行项目管理的时候有一些经常会遇到的问题处理起来比较复杂，本文记录了一些常用的命令和操作。&lt;/p&gt;

&lt;h3 id=&#34;修改某一次提交的说明信息:3ad87c55fc5af115fc9b1721031d1adf&#34;&gt;修改某一次提交的说明信息&lt;/h3&gt;

&lt;p&gt;有时候我们需要修改之前提交的时候的说明信息，没有操作命令可以直接完成，但是使用rebase命令可以实现。&lt;/p&gt;

&lt;p&gt;例如我们要修改倒数第二次的提交的说明信息：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git rebase -i HEAD~3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：这里HEAD~后面跟着的是3而不是2，因为这里指的是要修改的提交的父提交。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;之后会进入到文本编辑界面，如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.fatedier.com/pic/2014/2014-10-17-git-usually-command-git-reset-commit-message.jpg&#34; alt=&#34;reset-commit-message&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;将要修改的提交前面的 &lt;strong&gt;pick&lt;/strong&gt; 改为 &lt;strong&gt;edit&lt;/strong&gt; ，保存后退出。&lt;/p&gt;

&lt;p&gt;这个时候执行&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git commit --amend&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;就可以修改该次提交的说明了，修改完成后保存并退出。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git rebase --continue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;执行这条命令后，后续的提交说明将不会改变。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：不要修改已经push到远程仓库的提交！！！会引起版本混乱，使提交历史变的不清晰！&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;合并多个提交:3ad87c55fc5af115fc9b1721031d1adf&#34;&gt;合并多个提交&lt;/h3&gt;

&lt;p&gt;比如要合并最后两次的提交，其实和修改某一次提交的说明信息有点类似。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git rebase -i HEAD~2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后同样会进入到文本编辑界面，将第二行开头的 &lt;strong&gt;pick&lt;/strong&gt; 改为 &lt;strong&gt;squash&lt;/strong&gt; 或 &lt;strong&gt;s&lt;/strong&gt;，保存后退出。&lt;/p&gt;

&lt;p&gt;这时git会把两次提交合并，并且提示让你输入新的提交信息，保存后退出就成功完成两次提交的合并了。&lt;/p&gt;

&lt;h3 id=&#34;强制回退远程仓库到指定提交:3ad87c55fc5af115fc9b1721031d1adf&#34;&gt;强制回退远程仓库到指定提交&lt;/h3&gt;

&lt;p&gt;当我们在开发的时候出现一些关键性的错误，并且确认现在已经做的开发工作是无意义的时候，可能需要回退到之前的版本。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git reset --hard &amp;lt;commit_id&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git push origin HEAD --force&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;另外，reset命令还有几个可选参数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git reset &amp;ndash;mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;git reset &amp;ndash;soft：回退到某个版本，只回退了commit的信息，不会恢复到indexfile一级。如果还要提交，直接commit即可。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;git reset &amp;ndash;hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;reset-hard之后的恢复:3ad87c55fc5af115fc9b1721031d1adf&#34;&gt;reset &amp;ndash;hard之后的恢复&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;git reset --hard&lt;/code&gt; 之后，也许才发现这是一次错误的操作，那么我们就想要恢复到之前的版本。&lt;/p&gt;

&lt;p&gt;这个时候用git log是看不到之前的提交历史记录的。&lt;/p&gt;

&lt;p&gt;需要使用 &lt;code&gt;$ git reflog&lt;/code&gt; 找到我们需要恢复的HEAD的ID，然后使用reset命令恢复回去。&lt;/p&gt;

&lt;h3 id=&#34;查看指定版本的某个文件的内容:3ad87c55fc5af115fc9b1721031d1adf&#34;&gt;查看指定版本的某个文件的内容&lt;/h3&gt;

&lt;p&gt;例如要查看 f4869b0 这次提交的 test.cpp 文件的内容，test.cpp的路径需要使用相对于git目录的路径名，使用如下命令：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git show f4869b0:test.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;文件的内容会全部显示在界面上，可以使用文件重定向到另外的文件，再进行后续操作。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Git使用备忘</title>
          <link>http://blog.fatedier.com/2014/10/16/git-use-for-remind</link>
          <pubDate>Thu, 16 Oct 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/10/16/git-use-for-remind</guid>
          <description>

&lt;p&gt;Git是一款免费、开源的分布式版本控制系统，由于 GitHub 的存在，我们很方便的用于管理我们平时的开发项目。&lt;/p&gt;

&lt;p&gt;Git的命令较多，虽然大多数都不是很常用，但是还是需要记下来方便日后查看。&lt;/p&gt;

&lt;h3 id=&#34;git的配置:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;Git的配置&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 &amp;ndash;system 选项，读写的就是这个文件。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 &amp;ndash;global 选项，读写的就是这个文件。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所.git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。&lt;/p&gt;

&lt;h4 id=&#34;设置用户信息:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;设置用户信息&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git config --globaluser.name  &amp;quot;your-uasername&amp;quot;
$ git config --global user.email example@example.com
$ git config --global core.editor vim
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;设置差异分析工具:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;设置差异分析工具&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git config --global merge.tool vimdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;如何获取帮助文档:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;如何获取帮助文档&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git help &amp;lt;verb&amp;gt;
$ git &amp;lt;verb&amp;gt; --help
$ man git-&amp;lt;verb&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如 &lt;code&gt;man git-config&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;git基础操作:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;Git基础操作&lt;/h3&gt;

&lt;h4 id=&#34;取得git仓库-从现有仓库克隆:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;取得Git仓库（从现有仓库克隆）&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git clone https://github.com/schacon/fatest.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个命令会在当前目录下创建一个fatest的目录，其中的.git目录保存所有的版本记录。fatest下是项目的所有文件。&lt;/p&gt;

&lt;p&gt;如果要自定义目录名称，可以在末尾指定，例如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git clone https://github.com/schacon/fatest.git fatestnew&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;现在创建的目录就是fatestnew而不是fatest了，其他的都一样。&lt;/p&gt;

&lt;h4 id=&#34;检查当前项目文件状态:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;检查当前项目文件状态&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以看到有哪些文件是没有加入到版本中的，哪些是修改了还没提交的等等。&lt;/p&gt;

&lt;h4 id=&#34;将新文件加入到版本中:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;将新文件加入到版本中&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git add test.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;注：&lt;code&gt;git add&lt;/code&gt;命令对于不同状态的文件有不同的效果，可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。&lt;/p&gt;

&lt;p&gt;*注意*修改过后的文件处于未暂存状态，提交的时候处于未暂存状态的文件将不会提交，需要使用git add命令更改为暂存状态，之后再提交就会提交到仓库中了。&lt;/p&gt;

&lt;h4 id=&#34;忽略某些文件:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;忽略某些文件&lt;/h4&gt;

&lt;p&gt;对于不需要加入到版本中，并且使用git status时不再提示的文件。&lt;/p&gt;

&lt;p&gt;在 .gitignore 文件中进行配置，例如*.exe&lt;/p&gt;

&lt;p&gt;那么所有的以.exe结尾的文件都会被忽略，而不再提醒。&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 此为注释，将被 Git 忽略
# 忽略所有 .a 结尾的文件
*.a
# 但 lib.a 除外
!lib.a
# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
/TODO
# 忽略 build/ 目录下的所有文件
build/
# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
doc/*.txt
# ignore all .txt files in the doc/ directory
doc/**/*.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看已暂存和未暂存的更新文件差异:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;查看已暂存和未暂存的更新文件差异&lt;/h4&gt;

&lt;p&gt;未暂存：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git diff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;已暂存：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git diff --staged&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;提交更新:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;提交更新&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git commit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后进入vim编辑提交说明，保存即可。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git commit --m &amp;quot;comment&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用 &lt;em&gt;-m&lt;/em&gt; 命令可以直接在一行命令中写说明。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git commit -a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用 &lt;em&gt;-a&lt;/em&gt; 命令，会把未暂存和已暂存的文件一起提交，不然只会提交已暂存的文件。&lt;/p&gt;

&lt;h4 id=&#34;删除文件和取消跟踪:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;删除文件和取消跟踪&lt;/h4&gt;

&lt;p&gt;可以先本地使用rm命令删掉，这时候放在未暂存区域，之后用“git rm文件名”删掉。&lt;/p&gt;

&lt;p&gt;也可以直接使用 &lt;code&gt;git rm 文件名&lt;/code&gt; 删掉。&lt;/p&gt;

&lt;p&gt;另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。比如一些大型日志文件或者一堆 .a 编译文件，不小心纳入仓库后，要移除跟踪但不删除文件，以便稍后在 .gitignore 文件中补上，用 &amp;ndash;cached 选项即可：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git rm --cached readme.txt&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;移动文件:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;移动文件&lt;/h4&gt;

&lt;p&gt;例如要把 test.cpp 改为 tt.cpp&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git mv test.cpp tt.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;就相当于是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mv README.txt README
$ git rm README.txt
$ git add README
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看提交历史:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;查看提交历史&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git log&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;撤销操作:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;撤销操作&lt;/h4&gt;

&lt;h5 id=&#34;覆盖上一次的提交:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;覆盖上一次的提交&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git commit --amend&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;会将上次提交和这次提交合并起来，算作一次提交。&lt;/p&gt;

&lt;h5 id=&#34;取消已暂存文件:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;取消已暂存文件&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git reset HEAD &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个时候文件状态就从已暂存变为未暂存&lt;/p&gt;

&lt;h5 id=&#34;取消对文件的修改-还没有放到暂存区:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;取消对文件的修改（还没有放到暂存区）&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git checkout -- &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;运程仓库的使用:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;运程仓库的使用&lt;/h4&gt;

&lt;h5 id=&#34;查看当前的远程库:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;查看当前的远程库&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git remote&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;会列出每个远程库的简短的名字，默认使用origin表示原始仓库&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git remote -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;会额外列出远程库对应的克隆地址&lt;/p&gt;

&lt;h5 id=&#34;添加远程仓库:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;添加远程仓库&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git remote add [shortname] [url]&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;从远程仓库抓取数据:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;从远程仓库抓取数据&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git fetch [remote-name]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;抓取数据，但并不合并到当前分支&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git pull&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;自动抓取数据，并自动合并到当前分支&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git branch -r&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看所有远程分支&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git checkout -b test origin/test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;获取远程分支到本地新的分支上，并切换到新分支&lt;/p&gt;

&lt;h5 id=&#34;推送数据到远程仓库:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;推送数据到远程仓库&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git push [remote-name] [branch-name]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;推送操作会默认使用origin和master名字&lt;/p&gt;

&lt;h5 id=&#34;查看远程仓库信息:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;查看远程仓库信息&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git remote show [remote-name]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;除了对应的克隆地址外，它还给出了许多额外的信息。它友善地告诉你如果是在 master 分支，就可以用 git pull 命令抓取数据合并到本地。另外还列出了所有处于跟踪状态中的远端分支。&lt;/p&gt;

&lt;h5 id=&#34;远程仓库的删除:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;远程仓库的删除&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git remote rm [remote-name]&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;标签的使用:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;标签的使用&lt;/h4&gt;

&lt;h5 id=&#34;显示已有的标签:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;显示已有的标签&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git tag&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;新建标签:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;新建标签&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git tag v1.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;新建一个简单的标签&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git tag -a v1.0 -m &#39;my version 1.0&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;-m 指定了对应标签的说明&lt;/p&gt;

&lt;h5 id=&#34;后期加注标签:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;后期加注标签&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git log --pretty=oneline --abbrev-commit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;先显示提交历史&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git tag -a v1.1 9fceb02&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;补加标签&lt;/p&gt;

&lt;h5 id=&#34;推送标签:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;推送标签&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;$ git push origin [tagname]&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;设置命令别名:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;设置命令别名&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.co checkout&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;git分支:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;Git分支&lt;/h3&gt;

&lt;h4 id=&#34;新建分支:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;新建分支&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git branch testing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;会在当前commit对象上新建一个分支指针&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注：HEAD这个特别的指针是指向正在工作中的本地分支的指针&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;切换分支:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;切换分支&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git checkout testing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;切换到testing分支上&lt;/p&gt;

&lt;h4 id=&#34;分支的合并:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;分支的合并&lt;/h4&gt;

&lt;p&gt;在master分支上，执行：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git merge testing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;将tesing分支合并回master&lt;/p&gt;

&lt;h4 id=&#34;使用合并工具-可以自己设置-例如设置成vimdiff:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;使用合并工具（可以自己设置，例如设置成vimdiff）&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git mergetool&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;分支的管理:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;分支的管理&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git branch --merged&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看哪些分支已经被并入当前分支，通常这些都可以删除了。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git branch -d testing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;删除一个分支&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git branch -D testing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果该分支尚没有合并，可以使用-D选项强制删除。&lt;/p&gt;

&lt;h4 id=&#34;推送本地分支:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;推送本地分支&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git push origin testing&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;分支的衍合:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;分支的衍合&lt;/h4&gt;

&lt;p&gt;例如现在有两个分支，一个master，一个testing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git checkout testing
$ git rebase master
$ git checkout master
$ git merge testing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通常在贡献自己的代码之前先衍合，再提交，会让历史提交记录更清晰。&lt;/p&gt;

&lt;h3 id=&#34;git调试:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;Git调试&lt;/h3&gt;

&lt;h4 id=&#34;文件标注:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;文件标注&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git blame -L 12,22 test.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看test.cpp文件对每一行进行修改的最近一次提交。&lt;/p&gt;

&lt;h4 id=&#34;查看文件的历史提交:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;查看文件的历史提交&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git log --pretty=oneline test.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看test.cpp文件的历史提交记录&lt;/p&gt;

&lt;h4 id=&#34;查看文件的历史版本:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;查看文件的历史版本&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git show [commit] [file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例如：&lt;code&gt;$ git show 7da7c23 test.cpp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看7da7c23这次提交的test.cpp文件。&lt;/p&gt;

&lt;h4 id=&#34;查看历史提交的详细文件变化:7aa84c832c9ae9742e6d9b7e8364eeab&#34;&gt;查看历史提交的详细文件变化&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git log -p -2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通过这条命令可以看到最近两次提交的文件变化情况，删除的部分会以 &amp;ldquo;-&amp;rdquo; 开头，新增的部分会以 &amp;ldquo;+&amp;rdquo; 开头，方便查看。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>学习Git的常用网站</title>
          <link>http://blog.fatedier.com/2014/10/16/learn-git-website</link>
          <pubDate>Thu, 16 Oct 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/10/16/learn-git-website</guid>
          <description>

&lt;p&gt;学习Git的使用的过程中参考了很多的网站，主要是两个地方讲的比较清楚，例子也很丰富，特别记录一下。&lt;/p&gt;

&lt;h4 id=&#34;git官方文档:8a2c50993806c604dc839fed7e1197e9&#34;&gt;Git官方文档&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://git-scm.com/book/zh/&#34;&gt;http://git-scm.com/book/zh/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;廖雪峰git教程:8a2c50993806c604dc839fed7e1197e9&#34;&gt;廖雪峰Git教程&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&#34;&gt;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>主机使用代理上网，虚拟机Linux的shell如何连外网</title>
          <link>http://blog.fatedier.com/2014/10/14/how-virtual-machine-connect-internet-while-host-getonline-with-agent</link>
          <pubDate>Tue, 14 Oct 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/10/14/how-virtual-machine-connect-internet-while-host-getonline-with-agent</guid>
          <description>&lt;p&gt;在公司电脑上网都需要使用代理，虚拟机里面装的Linux系统需要使用yum命令来安装软件，所以需要在shell界面能连上外网才行。&lt;/p&gt;

&lt;p&gt;因为公司限制了每个人只能用一个IP，所以虚拟机中的Linux系统使用NAT方式和主机相连。主机是Win7操作系统，会发现网络里面多了VMnet8这个网络。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.fatedier.com/pic/2014/2014-10-14-how-virtual-machine-connect-internet-while-host-getonline-with-agent-vmware-net.jpg&#34; alt=&#34;vmware-net&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;在VMware界面，点击“编辑”，“虚拟网络编辑器”&lt;/p&gt;

&lt;p&gt;可以看到子网地址分配的是192.168.131.0&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;一般来说这时我们的主机会自动分配一个IP类似192.168.131.1这样的，子网掩码为255.255.255.0，如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.fatedier.com/pic/2014/2014-10-14-how-virtual-machine-connect-internet-while-host-getonline-with-agent-host-net.jpg&#34; alt=&#34;host-net&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;现在进入虚拟机的Linux进行设置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.fatedier.com/pic/2014/2014-10-14-how-virtual-machine-connect-internet-while-host-getonline-with-agent-network-configuration.jpg&#34; alt=&#34;network-configuration&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;注意IP需要设置成192.168.131.x的形势，网关是192.168.131.2。&lt;/p&gt;

&lt;p&gt;之后使用 &lt;code&gt;service network restart&lt;/code&gt; 命令重启网络服务。&lt;/p&gt;

&lt;p&gt;然后可以用 &lt;code&gt;ifconfig&lt;/code&gt; 命令检查配置是否正确。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最后，修改自己目录下的配置文件，使用“cd”命令进入自己的根目录。&lt;/p&gt;

&lt;p&gt;比如我的是.bash_profile&lt;/p&gt;

&lt;p&gt;添加代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export http_proxy=&amp;quot;http://proxy_addr:port&amp;quot;
export https_proxy=&amp;quot;http://proxy_addr:port&amp;quot;
export ftp_proxy=&amp;quot;http://proxy_addr:port&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;proxy_addr&lt;/strong&gt; 就是代理的IP地址&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;port&lt;/strong&gt; 是代理的款口号&lt;/p&gt;

&lt;p&gt;如果代理需要用户名和密码的话，这样设置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export http_proxy=&amp;quot;http://username:password@proxy_addr:port&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在就可以使用yum命令安装需要的软件了。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>C/C&#43;&#43;获取精确到微秒级的系统时间</title>
          <link>http://blog.fatedier.com/2014/09/30/get-systime-accurate-to-microseconds-in-c-or-cpp</link>
          <pubDate>Tue, 30 Sep 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/09/30/get-systime-accurate-to-microseconds-in-c-or-cpp</guid>
          <description>

&lt;p&gt;最近要为自己的项目开发一个日志模块，需要获取精确到微秒级的系统时间，查阅了一些资料，发现在C/C++里面可以通过 gettimeofday(struct timeval * tv,struct timezone * tz) 和 localtime(const time_t * timep) 这两个函数的配合使用来得到我想要的结果。&lt;/p&gt;

&lt;p&gt;先贴一下这两个函数的说明&lt;/p&gt;

&lt;h4 id=&#34;gettimeofday:9dfdc17010c4b06873ef31dbbc6dcd19&#34;&gt;gettimeofday&lt;/h4&gt;

&lt;p&gt;头文件：&lt;code&gt;#include &amp;lt;sys/time.h&amp;gt;   #include &amp;lt;unistd.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;定义函数：&lt;code&gt;int gettimeofday (struct timeval * tv, struct timezone * tz);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;函数说明：gettimeofday()会把目前的时间有tv 所指的结构返回，当地时区的信息则放到tz 所指的结构中。时间是从公元 1970 年1 月1 日的UTC 时间从0 时0 分0 秒算起到现在所经过的时间。&lt;/p&gt;

&lt;p&gt;timeval 结构定义为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct timeval
{
    long tv_sec;     // 秒
    long tv_usec;    // 微秒
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;timezone 结构定义为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct timezone
{
    int tz_minuteswest;  // 和格林威治时间差了多少分钟
    int tz_dsttime;      // 日光节约时间的状态
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;localtime:9dfdc17010c4b06873ef31dbbc6dcd19&#34;&gt;localtime&lt;/h4&gt;

&lt;p&gt;头文件：&lt;code&gt;#include &amp;lt;time.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;定义函数：&lt;code&gt;struct tm *localtime (const time_t *timep);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;函数说明：localtime()将参数timep 所指的time_t 结构中的信息转换成真实世界所使用的时间日期表示方法，然后将结果由结构tm 返回。&lt;/p&gt;

&lt;p&gt;结构tm 的定义为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int tm_sec;   // 代表目前秒数, 正常范围为0-59, 但允许至61 秒
int tm_min;   // 代表目前分数, 范围0-59
int tm_hour;  // 从午夜算起的时数, 范围为0-23
int tm_mday;  // 目前月份的日数, 范围1-31
int tm_mon;   // 代表目前月份, 从一月算起, 范围从0-11
int tm_year;  // 从1900 年算起至今的年数
int tm_wday;  // 一星期的日数, 从星期一算起, 范围为0-6
int tm_yday;  // 从今年1 月1 日算起至今的天数, 范围为0-365
int tm_isdst; // 日光节约时间的旗标
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用localtime函数的时候需要注意计算年份的时候需要加上1900，计算月份的时候需要加1。&lt;/p&gt;

&lt;h3 id=&#34;使用说明:9dfdc17010c4b06873ef31dbbc6dcd19&#34;&gt;使用说明&lt;/h3&gt;

&lt;p&gt;我们先调用gettimeofday函数获取到从公元 1970年1 月1 日的UTC 时间从0 时0 分0 秒算起到现在所经过的秒数加上微秒数，然后将秒数作为参数再调用localtime函数，转换为本地时区的当前时间即可，之后可以使用localtime函数返回的tm结构体对象来获取具体的年月日时分秒等数据。&lt;/p&gt;

&lt;h3 id=&#34;示例代码:9dfdc17010c4b06873ef31dbbc6dcd19&#34;&gt;示例代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
using namespace std;
 
string fa_getSysTime()
{
    struct timeval tv;
    gettimeofday(&amp;amp;tv,NULL);
    struct tm* pTime;
    pTime = localtime(&amp;amp;tv.tv_sec);
    
    charsTemp[30] = {0};
    snprintf(sTemp, sizeof(sTemp), &amp;quot;%04d%02d%02d%02d%02d%02d%03d%03d&amp;quot;, pTime-&amp;gt;tm_year+1900, \
    pTime-&amp;gt;tm_mon+1, pTime-&amp;gt;tm_mday, pTime-&amp;gt;tm_hour, pTime-&amp;gt;tm_min, pTime-&amp;gt;tm_sec, \
    tv.tv_usec/1000,tv.tv_usec%1000);
    return (string)sTemp;
}
 
int main()
{
    cout&amp;lt;&amp;lt; &amp;quot;当前时间：&amp;quot; &amp;lt;&amp;lt; fa_getSysTime() &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;输出为:9dfdc17010c4b06873ef31dbbc6dcd19&#34;&gt;输出为&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;当前时间：20140930110457794678&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>size() == 0和empty()的比较</title>
          <link>http://blog.fatedier.com/2014/09/26/function-size-equal-zero-compare-with-empty</link>
          <pubDate>Fri, 26 Sep 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/09/26/function-size-equal-zero-compare-with-empty</guid>
          <description>

&lt;p&gt;最近开发公司项目的时候发现大量用到了STL模板库，而且很多地方都需要判断一个容器是否为空，看到了两种写法，分别使用了容器的 size() 函数和 empty()函数。&lt;/p&gt;

&lt;p&gt;我觉得很好奇，这两种写法有什么区别呢？在网上查阅了一些资料，发现说empty()效率更高的占大多数。又查看了SGI STL的帮助文档，里面有一句话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are testing whether a container is empty, you should always write c.empty()instead of c.size() == 0. The two expressions are equivalent, but the formermay be much faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大致上的意思就是在检测容器是否为空的时候，推荐用empty()代替使用size() == 0，两者的含义是相等的，但是前者可能会更快一些。&lt;/p&gt;

&lt;p&gt;之后又在stackoverflow上看到有人提了一个类似的问题，并且贴出了STL的实现源码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool empty()const
    {return(size() == 0); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就让我更诧异了，这样的话empty()会比size() == 0更高效吗？&lt;/p&gt;

&lt;p&gt;实践是检验真理的唯一标准，那么我们就亲自来测试一下吧。&lt;/p&gt;

&lt;p&gt;为了公平起见，也为了测试方便，我分别在两个平台上进行测试，分别是Aix5.3以及Centos6.5。&lt;/p&gt;

&lt;p&gt;由于容器的内部实现的不同，我们测试三种比较典型也用的较多的容器：vector、list以及map。&lt;/p&gt;

&lt;p&gt;测试的代码如下，因为代码基本上差别不大，这里只贴一下测试vector的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;vector&amp;gt;
using namespace std;

class A
{
public:
    int a;
};

int main()
{
    cout &amp;lt;&amp;lt; &amp;quot;vector:&amp;quot; &amp;lt;&amp;lt; endl;

    long number = 20000000;
    vector&amp;lt;A&amp;gt; tmpList;
    A temp;
    temp.a = 1;

    struct timeval tv_begin, tv_end;

    //初始化tmpList中元素个数为：number
    tmpList.resize(number);

    //对size() == 0计时
    int flag = 0;
    gettimeofday(&amp;amp;tv_begin, NULL);
    for(long i=0; i&amp;lt;number*5; i++)
    {
        if(tmpList.size() == 0)
        {
        }
    }
    gettimeofday(&amp;amp;tv_end, NULL);
    cout &amp;lt;&amp;lt; &amp;quot;size() msec: &amp;quot; &amp;lt;&amp;lt; (tv_end.tv_sec - tv_begin.tv_sec)*1000 + (tv_end.tv_usec - tv_begin.tv_usec)/1000 &amp;lt;&amp;lt; endl;

    //对empty()计时
    gettimeofday(&amp;amp;tv_begin, NULL);
    for(long i=0; i&amp;lt;number*5; i++)
    {
        if(tmpList.empty())
        {
        }
    }
    gettimeofday(&amp;amp;tv_end, NULL);
    cout &amp;lt;&amp;lt; &amp;quot;empty() msec: &amp;quot; &amp;lt;&amp;lt; (tv_end.tv_sec - tv_begin.tv_sec)*1000 + (tv_end.tv_usec - tv_begin.tv_usec)/1000 &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里用到了gettimeofday这个函数用来计时，在需要计时的地方分别调用两次该函数之后得到的时间相减即可获得该代码段执行的时间。&lt;/p&gt;

&lt;p&gt;timeval结构体有两个变量分别是tv_sec和tv_usec分别是精确到秒和微秒级别。&lt;/p&gt;

&lt;p&gt;因为这两个函数本身耗时太短，不方便测算时间，所以采取重复调用再计时的方法。&lt;/p&gt;

&lt;h3 id=&#34;vector:e87a20174c7a89c9a430628f9c301c79&#34;&gt;vector&lt;/h3&gt;

&lt;h4 id=&#34;aix:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec:2736
empty() msec:4820

第2次输出：
vector:
size() msec:2762
empty() msec:4877
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;centos:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec: 298
empty() msec:1541

第2次输出：
vector:
size() msec: 283
empty() msec:1530
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list:e87a20174c7a89c9a430628f9c301c79&#34;&gt;list&lt;/h3&gt;

&lt;h4 id=&#34;aix-1:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec: 13
empty() msec: 22

第2次输出：
vector:
size() msec: 13
empty() msec: 22
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;centos-1:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec: 241696
empty() msec: 1

第2次输出：
vector:
size() msec: 242109
empty() msec: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;map:e87a20174c7a89c9a430628f9c301c79&#34;&gt;map&lt;/h3&gt;

&lt;h4 id=&#34;aix-2:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec: 1337
empty() msec: 1733

第2次输出：
vector:
size() msec: 1339
empty() msec: 1733
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;centos-2:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec: 291
empty() msec: 267

第2次输出：
vector:
size() msec: 290
empty() msec: 304
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出，并非在所有情况下empty()的效率都是优于size()的。具体的效率还和所使用的平台相关，准确的说是和STL源码的实现方式有关。&lt;/p&gt;

&lt;p&gt;下面我们就一起来看一下两个系统中STL源码部分是如何实现size()和empty()的。&lt;/p&gt;

&lt;h3 id=&#34;vector源码:e87a20174c7a89c9a430628f9c301c79&#34;&gt;vector源码&lt;/h3&gt;

&lt;h4 id=&#34;aix-3:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;size_type size() const
    {return (_Size); }
 
bool empty() const
    {return (size() == 0); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出Aix上vector的empty()函数实际上是调用了size()函数进行判断，size()函数返回的是表示当前容器数量的一个变量，所以，显然，size() == 0的效率是要高于empty()的，因为少了函数调用部分的耗时。&lt;/p&gt;

&lt;h4 id=&#34;centos-3:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;size_type size() const
    { return size_type(this-&amp;gt;_M_impl._M_finish -this-&amp;gt;_M_impl._M_start); }
 
bool empty() const
    { return begin() == end(); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里size()是尾指针减去头指针得到的，而empty()是比较头指针和尾指针是否相等。在empty()里多了函数调用以及临时变量赋值等操作。&lt;/p&gt;

&lt;h3 id=&#34;list源码:e87a20174c7a89c9a430628f9c301c79&#34;&gt;list源码&lt;/h3&gt;

&lt;h4 id=&#34;aix-4:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;size_type size() const
    {return (_Size); }
 
bool empty() const
    {return (size() == 0); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aix上对于在list中的处理方式依然和vector一样，维护了一个_Size变量，empty()多了一层函数调用，效率较低。&lt;/p&gt;

&lt;h4 id=&#34;centos-4:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;size_type size() const
    { return std::distance(begin(), end()); }
 
bool empty() const
    { return this-&amp;gt;_M_impl._M_node._M_next ==&amp;amp;this-&amp;gt;_M_impl._M_node; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;size()函数调用了distance函数用遍历的方法取得两个指针间的元素个数，然后返回。而empty()函数则是判断头指针的下一个节点是否是自己本身，只需要进行一次判断。所以，当list容器元素个数较多的时候，这里的empty()效率远大于size() == 0。&lt;/p&gt;

&lt;h3 id=&#34;map源码:e87a20174c7a89c9a430628f9c301c79&#34;&gt;map源码&lt;/h3&gt;

&lt;h4 id=&#34;aix-5:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;size_type size() const
    {return (_Size); }
 
bool empty() const
    {return (size() == 0); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不出意外，可以看出Aix上依然维护了一个_Size变量，在判断的时候都是用这个变量来判断，但是empty()多了一层函数调用，所以效率上会稍微低一些。&lt;/p&gt;

&lt;h4 id=&#34;centos-5:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool empty() const
    { return _M_impl._M_node_count == 0; }
 
size_type size() const
    { return _M_impl._M_node_count; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的map用到了红黑树，就不详细解释了，有兴趣的同学可以自己查阅相关资料。代码中empty()和size()用到的都是保存红黑树的节点数的变量，可以看出empty()和size() == 0两者其实是等价的。&lt;/p&gt;

&lt;h3 id=&#34;总结:e87a20174c7a89c9a430628f9c301c79&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;并不是所有的时候用empty()的效率都比size() == 0要高。&lt;/p&gt;

&lt;p&gt;例如在Aix上，由于所有的容器都维护了一个保存元素个数的值，调用size()的时候直接返回，而调用empty()的时候还是要去调用size()函数，所以会多一次函数调用的开销。在Aix上，显然使用size() == 0替代empty()将会使程序效率更高。&lt;/p&gt;

&lt;p&gt;而在Centos上，由于STL源码的实现方式不同，需要考虑到使用的容器，不同的容器调用size()和empty()的开销也不同，但是，相对来说，使用empty()的效率更加平均，例如在使用list容器的时候，如果数据量较大，size()的开销太大，而empty()则不会出现这种极端情况。&lt;/p&gt;

&lt;p&gt;如果考虑到平台迁移等等将来可能出现的状况，显然，empty()比size() == 0更加合适，可以确保你的程序不会出现太大的性能问题。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>从简单实例开始，学会写Makefile（二）</title>
          <link>http://blog.fatedier.com/2014/09/24/learn-to-write-makefile-02</link>
          <pubDate>Wed, 24 Sep 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/09/24/learn-to-write-makefile-02</guid>
          <description>

&lt;p&gt;如果文件间存在着相互之间的引用关系该怎么办？如果把.h文件和.cpp文件放在了不同的目录下该怎么办？如果我想生成静态库，然后在其他地方引用静态库该怎么办？如果我想将程序迁移到Unix平台下，使用不同的编译器，难道要依次修改所有的Makefile？&lt;/p&gt;

&lt;h3 id=&#34;d文件-解决文件间的相互引用:3da892c90f4c124b608eea75bdf80e17&#34;&gt;.d文件，解决文件间的相互引用&lt;/h3&gt;

&lt;h4 id=&#34;自动生成依赖关系:3da892c90f4c124b608eea75bdf80e17&#34;&gt;自动生成依赖关系&lt;/h4&gt;

&lt;p&gt;在前文的项目基础上，考虑一下这种情况：如果我们在w1.h文件里包含了头文件w2.h以及w3.h并且用到其中定义的函数。&lt;/p&gt;

&lt;p&gt;第一次编译没有遇到问题，但是如果后续的开发过程中修改了w2.h或者w3.h文件中的内容，再执行gmake命令的时候，就遇到问题了——w1.cpp文件不会被重新编译了！&lt;/p&gt;

&lt;p&gt;显然，我们需要将生成目标文件w1.o的规则的依赖项加上w2.h和w3.h。可是如果手动的去检查每一个文件的引用关系，然后修改Makefile文件，这样做的效率就太低了。&lt;/p&gt;

&lt;p&gt;万幸的是，编译器可以帮助我们自动生成依赖关系，只需要在编译命令中加上“-M”选项，就可以让编译器自动寻找源文件中包含的头文件，并生成一个依赖关系，例如，你可以在shell界面下敲下如下的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;g++-MM w1.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，其输出为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;w1.o:w1.cpp w2.h w3.h。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里需要特别注意的是，我们使用“-MM”而不是“-M”，因为我们使用的是GUN的C/C++编译器，使用“-M”参数会将标准库的头文件也一并包含进来，但这并不是我们想要的，而使用“-MM”则不会。&lt;/p&gt;

&lt;p&gt;现在的问题是，如何利用这个命令去写好我们的Makefile呢？&lt;/p&gt;

&lt;p&gt;GUN组织建议把每一个源文件自动生成的依赖关系放到一个.d文件中，让每一个.cpp文件都对应一个.d文件，例如之前的w1.cpp，我们可以生成一个w1.d文件，内容为自动生成的依赖关系 w1.o:w1.cpp w2.h w3.h，然后在Makefile中包含所有的.d文件，我们只需要写出.cpp文件和.d文件的依赖关系，让make自动更新或生成.d文件即可。&lt;/p&gt;

&lt;h4 id=&#34;生成-d文件:3da892c90f4c124b608eea75bdf80e17&#34;&gt;生成.d文件&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dep/%.d:%.cpp
    @if test ! -d &amp;quot;dep&amp;quot;; then\
        mkdir -p dep;\
    fi; \
    set -e; rm -f $@;
    g++ -MM $&amp;lt; &amp;gt; $@.$$$$; \
    sed &#39;s/$*\.o[ :]*/obj\/$*\.o dep\/$*\.d: /g&#39; &amp;lt; $@.$$$$ &amp;gt; $@; \
    rm -f $@.$$$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Makefile中加上如上的代码，就可以生成我们所需要的.d文件了。&lt;/p&gt;

&lt;p&gt;又是一堆莫名其妙的符号，我们还是来逐句进行分析。&lt;/p&gt;

&lt;h5 id=&#34;dep-d-cpp:3da892c90f4c124b608eea75bdf80e17&#34;&gt;dep/%.d: %.cpp&lt;/h5&gt;

&lt;p&gt;使所有的.d文件依赖于对应的.cpp文件，也就是说只要.cpp更新了，我们就重新生成对应的.d文件。这里和.o文件类似的，我们也创建一个dep目录用来存放所有的.d文件，既能保持项目文件的整洁和统一，也方便管理。&lt;/p&gt;

&lt;h5 id=&#34;if-test-d-dep-then:3da892c90f4c124b608eea75bdf80e17&#34;&gt;@if test ! -d &amp;ldquo;dep&amp;rdquo;; then&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@if test ! -d &amp;quot;dep&amp;quot;; then\
    mkdir -p dep;\
fi; \
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检查当前目录下是否存在dep目录，如果不存在，就使用mkdir命令创建dep目录。&lt;/p&gt;

&lt;h5 id=&#34;set-e-rm-f:3da892c90f4c124b608eea75bdf80e17&#34;&gt;set -e; rm -f $@;&lt;/h5&gt;

&lt;p&gt;set–e 的作用是如果命令执行出错就直接退出。$@的含义之前已经说过，这里rm –f $@的意思就是删除所有的目标文件。&lt;/p&gt;

&lt;h5 id=&#34;g-mm:3da892c90f4c124b608eea75bdf80e17&#34;&gt;g++ -MM $&amp;lt; &amp;gt; $@.$$$$; &lt;/h5&gt;

&lt;p&gt;$&amp;lt; 的含义是第一个依赖项的名称，&amp;gt; 是重定向符号，将输出结果重定向到指定文件中。$@.$$$$ 就是这个文件的文件名，其中“$$$$”表示一个随机的编号，例如如果有目标文件是w1.d，那么“$@.$$$$”一个可能的结果就是w1.d.12345。那么，这句话的含义就是将g++ -MM w1.cpp的输出结果重定向到w1.d.12345这个文件中。&lt;/p&gt;

&lt;h5 id=&#34;sed-s-o-obj-o-dep-d-g:3da892c90f4c124b608eea75bdf80e17&#34;&gt;sed &amp;rsquo;s/$&lt;em&gt;.o[ :]&lt;/em&gt;/obj\/$&lt;em&gt;.o dep\/$&lt;/em&gt;.d : /g&amp;rsquo; &amp;lt; $@.$$$$ &amp;gt; $@;&lt;/h5&gt;

&lt;p&gt;这里使用了sed这个工具对文本进行替换处理，单引号中的规则是’s/old/new/g’，s表示替换，末尾的g代表全局的意思，对文本中所有符合要求的字符串进行替换，sed会将符合old模式的字符串替换为new，具体的使用方法可以查阅一下sed这个工具的帮助文档。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;$@$$$$，将这个文件的内容作为sed工具的输入。

&amp;gt;$@，将sed处理后的内容重定向输出到这个文件中。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经过这一步的处理后，就把自动生成的依赖关系：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w1.o:w1.cpp w2.h w3.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w1.o w1.d:w1.cpp w2.h w3.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，我们的.d文件也会自动更新啦。&lt;/p&gt;

&lt;h5 id=&#34;rm-f:3da892c90f4c124b608eea75bdf80e17&#34;&gt;rm -f $@.$$$$&lt;/h5&gt;

&lt;p&gt;删除掉这个临时文件。&lt;/p&gt;

&lt;h4 id=&#34;使用include包含其他文件:3da892c90f4c124b608eea75bdf80e17&#34;&gt;使用include包含其他文件&lt;/h4&gt;

&lt;p&gt;在Makefile中我们也可以像在C++文件中那样包含其他文件。&lt;/p&gt;

&lt;p&gt;现在在我们的Makefile中加上这样一句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include w1.d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用这个语句就可以将之前我们生成的.d文件中的内容包含到当前的Makefile中。&lt;/p&gt;

&lt;p&gt;当然，也可以用这个命令来包含其他的Makefile文件。具体的用法后面再进行介绍。&lt;/p&gt;

&lt;p&gt;我们希望把所有的.d文件都包含在当前的Makefile中。&lt;/p&gt;

&lt;p&gt;先定义一个变量，存放所有的.d文件名：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEPS = $(addsuffix .d,$(addprefix dep/,$(BASE)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后使用include$(DEPS) 包含所有的.d文件。&lt;/p&gt;

&lt;h3 id=&#34;i-引用其他目录下的-h文件:3da892c90f4c124b608eea75bdf80e17&#34;&gt;-I，引用其他目录下的.h文件&lt;/h3&gt;

&lt;p&gt;考虑这种情况：现在有两个目录，一个inc目录用来存放.h文件，一个src目录，用来存放.cpp文件。怎么让编译器找到引用的.h文件在哪个目录下呢？&lt;/p&gt;

&lt;p&gt;我们可以使用“-I”选项。  格式为“-I目录名”，这样在编译的时候，编译器就会依次到我们指定的目录中寻找.h文件。&lt;/p&gt;

&lt;p&gt;同样，先定义一个变量，存放所有头文件的目录名：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INCLUDEDIR = -I../inc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后将&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g++ -c -o $@ $&amp;lt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的编译命令中写成&lt;/p&gt;

&lt;p&gt;g++ -c -o $@ $(INCLUDEDIR) $&amp;lt;&lt;/p&gt;

&lt;p&gt;OK，再来尝试用gmake命令编译一下吧，已经可以成功编译了。&lt;/p&gt;

&lt;p&gt;如果需要包含多个目录下的.h文件，可以重复使用-I选项，中间需要用空格隔开。&lt;/p&gt;

&lt;h3 id=&#34;使用静态库:3da892c90f4c124b608eea75bdf80e17&#34;&gt;使用静态库&lt;/h3&gt;

&lt;h4 id=&#34;修改生成静态库的makefile:3da892c90f4c124b608eea75bdf80e17&#34;&gt;修改生成静态库的Makefile&lt;/h4&gt;

&lt;p&gt;有的时候我们不需要生成一个可执行的程序，而是生成一个静态库文件，之后在其他的地方引用这个静态库文件。&lt;/p&gt;

&lt;p&gt;假设我们的项目目录结构是这样的，src是项目根目录，src下面有common和app以及lib两个目录，common和app下面都有inc和src两个目录。common存放公共库的源文件，app存放程序源文件，lib存放生成的静态库。&lt;/p&gt;

&lt;p&gt;修改我们在common目录下的Makefile文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;top_srcdir = ../..
#生成静态库后所存放的位置
libdir = $(top_srcdir)/lib
#静态库文件名
LIBNAME = libfa_common.a
#路径+静态库文件名
TARGET = $(libdir)/$(LIBNAME)

$(TARGET): $(OBJS)
    -rm -f $@
    ar cr $(TARGET) $(OBJS)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;top_srcdir是项目根目录的路径，使用相对路径，方便我们在后面引用其他目录。&lt;/li&gt;
&lt;li&gt;libdir是生成的静态库所存放的路径。&lt;/li&gt;
&lt;li&gt;LIBNAME是静态库名称，注意，静态库的命名必须以“lib”开头，以“.a”结尾。&lt;/li&gt;
&lt;li&gt;TARGET是目标文件名称，包含路径。&lt;/li&gt;
&lt;li&gt;在生成静态库文件的规则中，使用ar这个命令。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;修改引用静态库的makefile:3da892c90f4c124b608eea75bdf80e17&#34;&gt;修改引用静态库的Makefile&lt;/h4&gt;

&lt;p&gt;在app/src目录下的源文件中，编译的时候需要引用libfa_common.a这个静态库，这就需要我们再修改app目录下的Makefile文件。&lt;/p&gt;

&lt;p&gt;这里使用了两个新的参数，“-l”和“-L”。&lt;/p&gt;

&lt;p&gt;“-l”参数指定要引用的库的名称。例如我们要引用libfa_common.a这个静态库，那么需要在编译命令里加上“-lfa_common”，可以看出，-l后面的库名称需要去除前面的“lib”和后面的“.a”。&lt;/p&gt;

&lt;p&gt;“-L”参数指定了要引用的库的目录，用法和之前的“-I”一样。这里需要注意的是，我们需要修改一下VPATH这个变量，指明要引用的静态库的目录。类似这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VPATH:= -L $(top_srcdir)/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;完整的makefile:3da892c90f4c124b608eea75bdf80e17&#34;&gt;完整的Makefile&lt;/h3&gt;

&lt;p&gt;其实在每一个目录下的Makefile中有很多部分是重复的，我们可以考虑将重复的部分提取出来，单独放在一个公共的Makefile中，然后在其他Makefile中用include包含这个公共的Makefile即可。&lt;/p&gt;

&lt;p&gt;我写了三套Makefile，分别是Makefile（app）、Makefile（lib）、Make.rules。&lt;/p&gt;

&lt;p&gt;其中，Make.rules是公共部分，Makefile（app）是用来生成可执行程序的，Makefile（lib）是用来生成静态库的，为了以后迁移方便，考虑到Linux和Unix平台的差异，以及各个编译器之间的差异，可以将各种命令也定义成变量，之后使用宏定义进行条件编译。&lt;/p&gt;

&lt;p&gt;贴一下完整的Makefile代码。&lt;/p&gt;

&lt;h4 id=&#34;make-rules:3da892c90f4c124b608eea75bdf80e17&#34;&gt;Make.rules&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#公用Make规则配置

#设置编译器类型
CXX := g++
CC := gcc

#设置编译.d文件相关内容
DEPFLAGS := -MM
DEPFILE = $@.$$$$

#设置所有静态库文件所在位置，会根据每个Makefile文件的top_srcdir设置相对位置
LIBDIR := $(top_srcdir)/lib

#设置编译程序时需要在哪些目录查找静态库文件
LDFLAGS := -L.\
           -L$(top_srcdir)/lib

#设置VPATH，在检查依赖关系时，如果查找-lxxxx时，在哪些目录查找静态库文件
VPATH := $(LIBDIR)

#设置编译程序时查找头文件的目录位置
INCLUDEDIR := -I.\
              -I../inc\

#声明要生成的目标文件，具体规则在具体的Makefile中定义
$(TARGET):

#生成.o文件所依赖的.cpp和.c文件
obj/%.o:%.cpp
@if test ! -d &amp;quot;obj&amp;quot;; then\
    mkdir-p obj;\
fi;
$(CXX)-c -o $@ $(INCLUDEDIR) $&amp;lt;

obj/%.o:%.c
    @iftest ! -d &amp;quot;obj&amp;quot;; then\
            mkdir-p obj;\
    fi;
    $(CC)-c -o $@ $(INCLUDEDIR) $&amp;lt;

#生成.d文件,存放.cpp文件的所有依赖规则
dep/%.d: %.cpp
    @iftest ! -d &amp;quot;dep&amp;quot;; then\
            mkdir-p dep;\
    fi;\
    set-e; rm -f $@;
    $(CXX)$(DEPFLAGS) $(INCLUDEDIR) $&amp;lt; &amp;gt;$(DEPFILE); \
    sed&#39;s/$*\.o[ :]*/obj\/$*\.o dep\/$*\.d : /g&#39; &amp;lt; $@.$$$$ &amp;gt; $@;\
    rm-f $@.$$$$

#生成.d文件,存放.c文件的所有依赖规则
dep/%.d: %.c
    @iftest ! -d &amp;quot;dep&amp;quot;; then\
            mkdir-p dep;\
    fi;\
    set-e; rm -f $@;
    $(CC)$(DEPFLAGS) $(INCLUDEDIR) $&amp;lt; &amp;gt; $(DEPFILE); \
    sed&#39;s/$*\.o[ :]*/obj\/$*\.o dep\/$*\.d : /g&#39; &amp;lt; $@.$$$$ &amp;gt; $@; \
    rm-f $@.$$$$

include $(DEPS)

#检测是否有文件被修改，只要有就全部编译
all: $(SRCS) $(TARGETS)

#清除编译文件
.PHONY:clean
clean:
    -rm-f $(TARGET)
    -rm-f obj/*.o
    -rm-f dep/*.d
    -rm-f core
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;makefile-lib:3da892c90f4c124b608eea75bdf80e17&#34;&gt;Makefile（lib）&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#需要生成静态库的Makefile

#程序根目录
top_srcdir         =../../..

#生成静态库后所存放的位置
libdir = $(top_srcdir)/lib
#静态库文件名
LIBNAME          =libfa_common.a
#路径+静态库文件名
TARGET           =$(libdir)/$(LIBNAME)

CPP_FILES = $(shell ls *.cpp)
C_FILES = $(-shell ls *.c)
SRCS = $(CPP_FILES) $(C_FILES)
BASE = $(basename $(SRCS))
OBJS = $(addsuffix .o, $(addprefixobj/,$(BASE)))
DEPS = $(addsuffix .d, $(addprefixdep/,$(BASE)))

#包含公共Make规则
include$(top_srcdir)/makeinclude/Make.rules

#设置头文件及库文件的位置
INCLUDEDIR := $(INCLUDEDIR)

$(TARGET): $(OBJS)
    -rm-f $@
    ar cr $(TARGET) $(OBJS)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;makefile-app:3da892c90f4c124b608eea75bdf80e17&#34;&gt;Makefile（app）&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#需要生成可执行程序的Makefile

#程序根目录
top_srcdir         =../../..

#目标程序名
TARGET = test

CPP_FILES = $(shell ls *.cpp)
C_FILES = $(-shell ls *.c)
SRCS = $(CPP_FILES) $(C_FILES)
BASE = $(basename $(SRCS))
OBJS = $(addsuffix .o, $(addprefixobj/,$(BASE)))
DEPS = $(addsuffix .d, $(addprefixdep/,$(BASE)))

#包含公共Make规则
include $(top_srcdir)/makeinclude/Make.rules

#额外需要包含的头文件的目录位置
INCLUDEDIR := $(INCLUDEDIR)\
              -I$(top_srcdir)/src/common/inc\

#所有要包含的静态库的名称
LIBS := -lfa_common

#设置目标程序依赖的.o文件
$(TARGET):$(OBJS) $(LIBS)
    -rm-f $@
    $(CXX)-o $(TARGET) $(INCLUDEDIR) $(LDFLAGS) $(OBJS) $(LIBS)
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>从简单实例开始，学会写Makefile（一）</title>
          <link>http://blog.fatedier.com/2014/09/08/learn-to-write-makefile-01</link>
          <pubDate>Mon, 08 Sep 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/09/08/learn-to-write-makefile-01</guid>
          <description>

&lt;p&gt;作为一个刚刚从大学毕业的新人，进公司不久就遇到了一个不大不小的门槛——看不懂Makefile！而Makefile所干的事却关系到程序的编译和链接，一个好的Makefile文件可以极大地提升编译项目文件的效率，免去手动编译的烦恼。&lt;/p&gt;

&lt;p&gt;不会写Makefile虽然还不至于影响到项目进度，从别的地方拷贝一份过来稍加修改就可以用了，但是，对于咱们“程序猿”来说这实在是一件让人感觉很不爽的事。于是，百度，谷歌（PS：吐槽一下，不XX的话Google已经完全不能用了，Bing的效果都要比百度好一些），各种看资料，看大牛的博客，或许是本人比较笨，也或许是网上的资料不太适合咱们这种新人，缺乏生动的实例讲解，所以决定自己动手研究一下，并把过程分享给大家，希望新人们看完这篇文章后就能够自己动手，为自己的项目编写合适的Makefile啦。&lt;/p&gt;

&lt;h3 id=&#34;为什么要写makefile:faa200a09f18bf5060563b9fc5d15373&#34;&gt;为什么要写Makefile&lt;/h3&gt;

&lt;p&gt;首先要确定我们的目标，Makefile是用来干嘛的？&lt;/p&gt;

&lt;p&gt;曾经很长时间我都是在从事Windows环境下的开发，所以根本不知道Makefile是个什么东西。因为早已经习惯了使用VS、Eclipse等等优秀的IDE做开发，只要点一个按钮，程序就可以运行啦。但是进入公司以后，从事的是Unix环境下的开发工作，没有了IDE，要怎么才能让我写的代码编译后运行呢？&lt;/p&gt;

&lt;p&gt;在这里，Makefile的作用就体现出来了，简单的四个字—— “自动编译”。一旦整个项目的Makefile都写好了以后，只需要一个简单的make命令，就可以实现自动编译了。当然，准确的说，是make这个命令工具帮助我们实现了我们想要做的事，而Makefile就相当于是一个规则文件，make程序会按照Makefile所指定的规则，去判断哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译。&lt;/p&gt;

&lt;p&gt;俗话说，懒人创造了整个世界，程序员就是在不断偷懒的过程中获得进步，使用Makefile最根本的目的就是简化我们的工作。&lt;/p&gt;

&lt;p&gt;下面我们就从头开始，一步一步的去学习如何写好一个Makefile文件吧！&lt;/p&gt;

&lt;h3 id=&#34;从单个文件开始:faa200a09f18bf5060563b9fc5d15373&#34;&gt;从单个文件开始&lt;/h3&gt;

&lt;h4 id=&#34;1-单个文件的编译:faa200a09f18bf5060563b9fc5d15373&#34;&gt;1、单个文件的编译&lt;/h4&gt;

&lt;p&gt;为了便于大家学习，这篇文章是以常见的Linux平台为基础的，系统为Centos6.5，使用GNU make工具进行编译，项目文件为C++格式。这里假定看到这篇文章的都是已经对C++程序的编译等基础知识和相关命令有了一定的了解的，鉴于篇幅限制，如果还有不清楚的就请自行查阅相关资料啦。&lt;/p&gt;

&lt;p&gt;假设我们在src目录下有一个test.cpp文件，我们是如何编译它的呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;g++ -o test test.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在shell界面执行这句命令，当前目录下会生成一个名为test的可执行程序，使用./test就可以执行该程序，看到输出结果。&lt;/p&gt;

&lt;p&gt;现在我们尝试使用编写Makefile的方式来实现这一编译过程。 首先在当前目录下新建文件并命名为“Makefile”，这样编译的时候直接使用gmake命令即可，默认使用“Makefile”文件进行编译，也可以是其他名字，那样的话需要使用“gmake -f 文件名”的格式来指定Makefile文件。&lt;/p&gt;

&lt;p&gt;Makefile文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test:test.cpp
    g++-o test test.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在shell界面下执行gmake命令，敲下回车，OK。&lt;/p&gt;

&lt;p&gt;可以发现，g++ -o test test.cpp 这条命令已经被自动执行了，生成了名为test的程序。&lt;/p&gt;

&lt;h4 id=&#34;2-makefile的描述规则:faa200a09f18bf5060563b9fc5d15373&#34;&gt;2、Makefile的描述规则&lt;/h4&gt;

&lt;p&gt;至此，我们已经完成了一个最简单的Makefile文件，向我们的最终目标迈出了一大步！&lt;/p&gt;

&lt;p&gt;有的人会问，传说中的自动化编译呢？难道每一个文件都要自己去写文件名和命令？&lt;/p&gt;

&lt;p&gt;不用急，我们先来分析一下这个Makefile文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TARGET... :PREREQUISITES...
    COMMAND
    ...
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是最简单的Makefile文件的描述规则，可以说，这也是Makefile中最精华的部分，其他部分都是围绕着这个最基本的描述规则的。先来解释一下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TARGET：规则生成的目标文件，通常是需要生成的程序名（例如前面出现的程序名test）或者过程文件（类似.o文件）。&lt;/li&gt;
&lt;li&gt;PREREQUISITES：规则的依赖项，比如前面的Makefile文件中我们生成test程序所依赖的就是test.cpp。&lt;/li&gt;
&lt;li&gt;COMMAND：规则所需执行的命令行，通常是编译命令。这里需要注意的是每一行命令都需要以[TAB]字符开头。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再来看我们之前写过的Makefile文件，这个规则，用通俗的自然语言翻译过来就是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果目标test文件不存在，根据规则创建它。&lt;/li&gt;
&lt;li&gt;目标test文件存在，并且test文件的依赖项中存在任何一个比目标文件更新（比如修改了一个函数，文件被更新了），根据规则重新生成它。&lt;/li&gt;
&lt;li&gt;目标test文件存在，并且它比所有的依赖项都更新，那么什么都不做。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当我们第一次执行gmake命令时，test文件还不存在，所以就会执行g++-o test test.cpp这条命令创建test文件。&lt;/p&gt;

&lt;p&gt;而当我们再一次执行gmake时，会提示文件已经是最新的，什么都不做。&lt;/p&gt;

&lt;p&gt;这时候，如果修改了test.cpp命令，再次执行gmake命令。&lt;/p&gt;

&lt;p&gt;由于依赖项比目标文件更新，g++ -o test test.cpp这条命令就又会被再一次执行。&lt;/p&gt;

&lt;p&gt;现在，我们已经学会如何写一个简单的Makefile文件了，每次修改过源文件以后，只要执行gmake命令就可以得到我们想要生成的程序，而不需要一遍遍地重复敲g++ -o test test.cpp这个命令。&lt;/p&gt;

&lt;h3 id=&#34;多个文件的编译:faa200a09f18bf5060563b9fc5d15373&#34;&gt;多个文件的编译&lt;/h3&gt;

&lt;h4 id=&#34;1-使用命令行编译多个文件:faa200a09f18bf5060563b9fc5d15373&#34;&gt;1、使用命令行编译多个文件&lt;/h4&gt;

&lt;p&gt;一个项目不可能只有一个文件，学会了单个文件的编译，自然而然就要考虑如何去编译多个文件呢？&lt;/p&gt;

&lt;p&gt;同样，假设当前目录下有如下7个文件，test.cpp、w1.h、w1.cpp、w2.h、w2.cpp、w3.h、w3.cpp。其中test.cpp包含main函数，并且引用了w1.h、w2.h以及w3.h。我们需要生成的程序名为test。&lt;/p&gt;

&lt;p&gt;在shell界面下，为了正确编译我们的项目，我们需要敲下如下的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;g++ -c -o w1.ow1.cpp
g++ -c -o w2.o w2.cpp
g++ -c -o w3.o w3.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时当前目录下会生成w1.o、w2.o、w3.o三个.o文件。这里需要注意的是，“-c”命令是只编译，不链接，通常生成.o文件的时候使用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;g++ -o testtest.cpp w1.o w2.o w3.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行完这条命令后，编译成功，得到了我们想要的test文件。&lt;/p&gt;

&lt;h4 id=&#34;2-使用makefile编译多个文件:faa200a09f18bf5060563b9fc5d15373&#34;&gt;2、使用Makefile编译多个文件&lt;/h4&gt;

&lt;p&gt;既然单个文件的Makefile会写了，相信多个文件举一反三也不是问题了。&lt;/p&gt;

&lt;p&gt;Makefile具体内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test:test.cppw1.o w2.o w3.o
    g++ -o test test.cpp w1.o w2.o w3.o
w1.o:w1.cpp
    g++ -c -o w1.o w1.cpp
w2.o:w2.cpp
    g++ -c -o w2.o w2.cpp
w3.o:w3.cpp
    g++ -c -o w3.o w3.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里需要注意的是，我们写的第一个规则的目标，将会成为“终极目标”，也就是我们最终希望生成的程序，这里是“test”文件。根据我们的“终极目标”，make会进行自动推导，例如“终极目标”依赖于的.o文件，make就会寻找生成这些.o文件的规则，然后执行相应的命令去生成这些文件，这样一层一层递归地进行下去，直到最终生成了“终极目标”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.fatedier.com/pic/2014/2014-09-08-learn-to-write-makefile-01-gmake-target.jpg&#34; alt=&#34;gmake-target&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;如上图所示，虽然生成test文件的规则写在最前面，但是由于依赖于w1.o、w2.o、w3.o，make会先执行生成w1.o、w2.o、w3.o所需的命令，然后才会执行g++ -o test test.cpp w1.o w2.o w3.o 来生成test文件。&lt;/p&gt;

&lt;h4 id=&#34;3-使用伪目标来清除过程文件:faa200a09f18bf5060563b9fc5d15373&#34;&gt;3、使用伪目标来清除过程文件&lt;/h4&gt;

&lt;p&gt;我们现在已经可以自动编译多个文件的项目了，但是当我们需要全部重新编译的时候，难道还要手动地一个一个去删除那些生成的.o文件吗？&lt;/p&gt;

&lt;p&gt;既然已经使用了Makefile，我们的目标就是实现自动化编译，那么这些清除过程文件这点小事必须得能够用一个命令搞定啦。&lt;/p&gt;

&lt;p&gt;我们只需要在Makefile文件的最后加上如下几行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;clean:
    -rm–f test *.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK，轻松搞定，然后在shell界面下执行gmakeclean。仔细看看，是不是所有的.o文件和最后生成的程序文件已经被清除了？&lt;/p&gt;

&lt;p&gt;这里说明一下，rm是Linux下删除文件或目录的命令，前面加上“-”符号意思是忽略执行rm产生的错误。“-f”参数是指强制删除，忽略不存在的文件。&lt;/p&gt;

&lt;p&gt;这样的目标叫做“伪目标”，通过“gmake 目标名”来指定这个目标，然后执行这个目标规则下的命令。&lt;/p&gt;

&lt;h3 id=&#34;使用变量简化makefile:faa200a09f18bf5060563b9fc5d15373&#34;&gt;使用变量简化Makefile&lt;/h3&gt;

&lt;p&gt;作为一个“懒惰”的程序员，现在问题又来了。如果按照上面的写法，在文件数量和名称不变的情况的下确实是没有问题，但是如果我们新增一个文件的话，岂不是又要去修改Makefile了，一个项目多的可能有成百上千的文件，这样管理起来得有多麻烦呀！&lt;/p&gt;

&lt;p&gt;还记得我们在Linux下如果要查看当前目录下所有的cpp文件的时候，使用的命令吗？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls *.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过这个命令，我们就可以将所有的cpp文件名称显示在界面上。而在Makefile中我们同样可以使用类似的规则来做简化，进一步减少后续开发过程中对Makefile文件的修改。&lt;/p&gt;

&lt;p&gt;修改后的Makefile文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TARGET = test

CPP_FILES = $(shell ls *.cpp)
BASE = $(basename $(CPP_FILES))
OBJS = $(addsuffix .o, $(addprefix obj/,$(BASE)))
 
$(TARGET):$(OBJS)
    -rm -f $@
    g++ -o $(TARGET)$(OBJS)
 
obj/%.o:%.cpp
    @if test ! -d&amp;quot;obj&amp;quot;; then\
    mkdir -pobj;\
    fi;
    g++ -c -o $@ $&amp;lt;
 
clean:
    -rm -f test
    -rm -f obj/*.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是不是瞬间有种摸不着头脑的感觉？别急，这是因为我们用到了一些新的语法和命令，其实，本质上和我们之前所写的Makefile文件是一个意思，下面我们就逐条来进行分析。&lt;/p&gt;

&lt;h5 id=&#34;target-test:faa200a09f18bf5060563b9fc5d15373&#34;&gt;TARGET = test&lt;/h5&gt;

&lt;p&gt;定义一个变量，保存目标文件名，这里我们需要生成的程序名就叫test。&lt;/p&gt;

&lt;h5 id=&#34;cpp-files-shell-ls-cpp:faa200a09f18bf5060563b9fc5d15373&#34;&gt;CPP_FILES = $(shell ls *.cpp)&lt;/h5&gt;

&lt;p&gt;定义一个变量，内容为所有的以.cpp为后缀的文件的文件名，以空格隔开。&lt;/p&gt;

&lt;p&gt;这里&amp;amp;(shell 命令)的格式，说明这里将会用shell命令执行后输出的内容进行替换，就和在命令行下输入ls *.cpp得到的结果一样。&lt;/p&gt;

&lt;h5 id=&#34;base-basename-cpp-files:faa200a09f18bf5060563b9fc5d15373&#34;&gt;BASE = $(basename $(CPP_FILES))&lt;/h5&gt;

&lt;p&gt;定义一个变量，内容为所有的以.cpp为后缀的文件的文件名去除掉后缀部分。&lt;/p&gt;

&lt;p&gt;$(CPP_FILES)是引用CPP_FIFES这个变量的内容，相信学过如何写shell命令的同学肯定不会陌生。basename 是一个函数，其作用就是去除掉文件名的后缀部分，例如“test.cpp”，经过这一步后就变成了“test”。&lt;/p&gt;

&lt;h5 id=&#34;objs-addsuffix-o-addprefix-obj-base:faa200a09f18bf5060563b9fc5d15373&#34;&gt;OBJS = $(addsuffix .o, $(addprefix obj/,$(BASE)))&lt;/h5&gt;

&lt;p&gt;定义一个变量，内容为所有的以.cpp为后缀的文件去除调后缀部分后加上“.o”。&lt;/p&gt;

&lt;p&gt;和basename一样，addsuffix和addprefix同样也是调用函数。addprefix的作用是给每个文件名加上前缀，这里是加上“obj/”，而addsuffix的作用是给每个文件名加上后缀，这里是在文件名后加上“.o”。例如“test”，经过变换后变成了“obj/test.o”。&lt;/p&gt;

&lt;p&gt;为什么要在文件名前加上“obj/”？&lt;/p&gt;

&lt;p&gt;这个不是必须的，只是我自己觉得将所有的.o文件放在一个obj目录下统一管理会让目录结构显得更加清晰，包括以后的.d文件会统一放在dep目录下一样。当然，你也可以选择不这样做，而是全部放在当前目录下。&lt;/p&gt;

&lt;h5 id=&#34;target-objs:faa200a09f18bf5060563b9fc5d15373&#34;&gt;$(TARGET):$(OBJS)&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$(TARGET):$(OBJS)
    -rm -f $@
    g++ -o $(TARGET) $(OBJS)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个描述规则和我们之前写过的很像，只不过，使用了变量进行替换。其中需要注意的是$@这个奇怪的符号，它的含义是这个规则的目标文件的名称，在这里就相当于是$(TARGET)。&lt;/p&gt;

&lt;p&gt;把这里的变量替换成我们之前项目中的实际值，就相当于：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test:test.ow1.o w2.o w3.o
    -rm-f test
    g++ -o test test.o w1.o w2.o w3.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果按照这种写法，当我们新增了一个w4.cpp文件的时候，就需要对Makefile进行修改，而如果我们使用了变量进行替换，那么我们就什么都不用做，直接再执行一遍gmake命令即可。&lt;/p&gt;

&lt;h5 id=&#34;obj-o-cpp:faa200a09f18bf5060563b9fc5d15373&#34;&gt;obj/%.o:%.cpp&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obj/%.o:%.cpp
    @if test ! -d&amp;quot;obj&amp;quot;; then\
        mkdir -p obj;\
    fi;
    g++ -c -o $@ $&amp;lt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是依次生成所有cpp文件所对应的.o文件的规则。&lt;/p&gt;

&lt;p&gt;%.o和%.c表示以.o和.c结尾的文件名。因为我们准备把所有的.o文件放在obj目录下，所以这里在“%.o”前面加上前缀“obj/”。&lt;/p&gt;

&lt;p&gt;下面命令行的前三行，具体的作用是检查当前目录下是否有名为“obj”的目录，如果没有，则使用mkdir命令创建这个目录。如果不了解的同学不如先去看一下shell编程的相关知识吧。&lt;/p&gt;

&lt;p&gt;最后一句中的$@前面已经解释过了，是代表规则的目标文件名称，而$&amp;lt;与之对应的，则是代表规则的依赖项中第一个依赖文件的名称。&lt;/p&gt;

&lt;p&gt;例如obj/test.o:test.cpp&lt;/p&gt;

&lt;p&gt;那么$@的值为“test.o”，$&amp;lt;的值为“test.cpp”&lt;/p&gt;

&lt;h5 id=&#34;clean:faa200a09f18bf5060563b9fc5d15373&#34;&gt;clean:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;clean:
    -rm -f test
    -rm -f obj/*.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个就没什么好说的啦，这里只是修改了一下.o文件的路径。&lt;/p&gt;

&lt;p&gt;到这里，相信你对如何使用Makefile来编译一个小的项目已经颇有些眉目了吧。使用这个Makefile文件，不管你往这个目录下加多少文件，轻轻松松一个gmake命令搞定，不需要再因为加了一个新的文件而去修改Makefile了。&lt;/p&gt;

&lt;p&gt;但是，你难道没有觉得仍然存在着很多问题吗？&lt;/p&gt;

&lt;p&gt;如果文件间存在着相互之间的引用关系该怎么办？&lt;/p&gt;

&lt;p&gt;如果把.h文件和.cpp文件放在了不同的目录下该怎么办？&lt;/p&gt;

&lt;p&gt;如果我想生成静态库，然后在其他地方引用静态库该怎么办？&lt;/p&gt;

&lt;p&gt;如果我想将程序迁移到Unix平台下，使用不同的编译器，难道要依次修改所有的Makefile？&lt;/p&gt;

&lt;p&gt;大家可以先尝试着自己解决以上的问题，在之后的篇幅中我们会就以上几点继续通过举例的方式来加以解决。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
