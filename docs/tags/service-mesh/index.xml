<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Service Mesh on fatedier blog</title>
    <link>http://blog.fatedier.com/tags/service-mesh/</link>
    <description>Recent content in Service Mesh on fatedier blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2018. All rights reserved.</copyright>
    <lastBuildDate>Sat, 01 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.fatedier.com/tags/service-mesh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Service Mesh 探索之优先本地访问</title>
      <link>http://blog.fatedier.com/2018/12/01/service-mesh-explore-local-node-lb/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://blog.fatedier.com/2018/12/01/service-mesh-explore-local-node-lb/</guid>
      <description>&lt;p&gt;在设计 Service Mesh 架构方案时，考虑到有一些基础服务，访问频率高，流量大，如果在 kubernetes 平台上采用 DaemonSet 的部署方式，每一个机器部署一个实例，访问方能够优先访问同一个节点上的该服务，则可以极大地减少网络开销和延迟。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Service Mesh 自研实践</title>
      <link>http://blog.fatedier.com/2018/10/15/self-designed-service-mesh/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://blog.fatedier.com/2018/10/15/self-designed-service-mesh/</guid>
      <description>&lt;p&gt;最近都在做自研 Service Mesh 方案的落地和后续迭代优化，目前稳定承接了旧系统的大部分流量，这里分享一下这套架构，以及过程中的思考和遇到的一些问题。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>