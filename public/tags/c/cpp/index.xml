<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fatedier blog </title>
    <link>http://blog.fatedier.com/tags/c/cpp/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2016</rights>
    <updated>2015-03-04 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>在C&#43;&#43;中利用反射和简单工厂模式实现业务模块解耦</title>
          <link>http://blog.fatedier.com/2015/03/04/decoupling-by-using-reflect-and-simple-factory-pattern-in-cpp</link>
          <pubDate>Wed, 04 Mar 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2015/03/04/decoupling-by-using-reflect-and-simple-factory-pattern-in-cpp</guid>
          <description>

&lt;p&gt;在设计一个系统框架的时候往往需要划分各个模块、组件，抽象出公共的部分，尽量避免耦合，以利于以后的扩展和复用。在这方面，JAVA的很多特性在利用各种设计模式的时候会非常容易，而在C++中就需要自己去一步步实现。&lt;/p&gt;

&lt;h3 id=&#34;业务说明:b843d88db977db74e59764a23a86a6c0&#34;&gt;业务说明&lt;/h3&gt;

&lt;p&gt;为了便于说明，举一个简单的例子。假设现在有一个项目需要建立一个和银行交互的平台，目前只接入工商银行，后续接入其他银行，每个银行的业务都有差异，报文格式可能也不一致。&lt;/p&gt;

&lt;p&gt;这里只列举几个简要的流程，仅包括拼报文，发送报文，接收报文，解析报文，其余整体架构以及后续处理等内容省略。&lt;/p&gt;

&lt;h3 id=&#34;初步设计:b843d88db977db74e59764a23a86a6c0&#34;&gt;初步设计&lt;/h3&gt;

&lt;p&gt;创建一个银行交互类 BankOpt，包括四个函数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int setMsg();       // 拼报文
int sendMsg();      // 发送报文
int getMsg();       // 接收报文
int parseMsg();     // 解析报文
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在每个函数中通过if-else来判断具体是哪一个银行，之后进行相应的处理。&lt;/p&gt;

&lt;p&gt;这种设计在刚开发的时候非常方便，代码量少，但是如果后续需要接入另外一个银行时就需要改动 &lt;strong&gt;BankOpt&lt;/strong&gt; 类，不符合设计模式中的开放-封闭原则。而且单个函数中将来可能会有大量的 &lt;strong&gt;if-else&lt;/strong&gt;，使代码可读性下降。&lt;/p&gt;

&lt;h3 id=&#34;简单工厂模式:b843d88db977db74e59764a23a86a6c0&#34;&gt;简单工厂模式&lt;/h3&gt;

&lt;p&gt;通过简单工厂模式，我们可以创建一个专门的工厂类用于实例化一个合适的银行交互类，只需要这个银行交互类具有共同的接口即可。&lt;/p&gt;

&lt;p&gt;首先，为了实现更好的复用，把各个银行交互类中相同的部分抽象出来，形成一个银行交互基类，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class BaseBank
{
public:
    virtual int setMsg() = 0;
    virtual int sendMsg() = 0;
    virtual int getMsg() = 0;
    virtual int parseMsg() = 0;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里仅仅声明了四个纯虚函数，具体的业务逻辑在子类中实现。&lt;/p&gt;

&lt;p&gt;创建两个银行交互子类GSBank（工商银行）和RMBank（人民银行），继承BaseBank，实现四个虚函数。&lt;/p&gt;

&lt;h4 id=&#34;创建一个工厂类:b843d88db977db74e59764a23a86a6c0&#34;&gt;创建一个工厂类&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class BankFactory
{
public:
    BaseBank* createBank(const string&amp;amp; bank_name) {
    if (bank_name == &amp;quot;SBank&amp;quot;) 
        return new GSBank();
    else if (bank_name == &amp;quot;MBank&amp;quot;)
        return new RMBank();
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;工厂类中有一个 &lt;strong&gt;createBank&lt;/strong&gt; 函数，用于根据银行编码创建相应的实例并返回其基类指针，这样我们只需要通过基类指针调用相关函数即可。&lt;/p&gt;

&lt;h4 id=&#34;在主流程中调用:b843d88db977db74e59764a23a86a6c0&#34;&gt;在主流程中调用&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BankFactory bf;
BaseBank* t = (BaseBank*)bf.createBank(bank_name);
if (t == NULL) {
    cout &amp;lt;&amp;lt; &amp;quot;银行编码错误！&amp;quot; &amp;lt;&amp;lt; endl;
    return 2;
}
t-&amp;gt;setMsg();
t-&amp;gt;sendMsg();
t-&amp;gt;getMsg();
t-&amp;gt;parseMsg();
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;优缺点:b843d88db977db74e59764a23a86a6c0&#34;&gt;优缺点&lt;/h4&gt;

&lt;p&gt;利用简单工厂模式，当我们后续接入另外的银行时，只需要添加具体的银行交互类，实现业务函数，然后在工厂类的 &lt;strong&gt;createBank&lt;/strong&gt; 函数中添加一个 &lt;strong&gt;else if&lt;/strong&gt; 子句。相对于原来的设计已经改进很多了，但是仍然需要修改原来的工厂类的代码，没有彻底实现解耦。&lt;/p&gt;

&lt;h3 id=&#34;反射:b843d88db977db74e59764a23a86a6c0&#34;&gt;反射&lt;/h3&gt;

&lt;p&gt;反射在java的一些框架中使用的比较多，而且用起来非常方便。C++本身并不支持，但是我们可以模拟一些简单的特性。&lt;/p&gt;

&lt;p&gt;我们需要一种能够根据字符串动态获取对应的银行交互类的实例的方法。这样在工厂类的 &lt;strong&gt;createBank&lt;/strong&gt; 方法中就可以根据字符串直接获取对应银行交互类的实例，而不需要再每次通过新增 &lt;strong&gt;else if&lt;/strong&gt; 子句来新增一个银行接口。&lt;/p&gt;

&lt;p&gt;也就是说，利用反射和简单工厂模式，下次当我们需要新增一个银行接口的时候只需要新增一个银行交互类即可，不需要修改原来的任何代码，实现了业务上的解耦。&lt;/p&gt;

&lt;h4 id=&#34;如何在c-中实现反射:b843d88db977db74e59764a23a86a6c0&#34;&gt;如何在C++中实现反射&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;需要一个全局的map用于存储类的信息以及创建实例的函数&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;需要反射的类需要提供一个用于创建自身实例的函数&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;利用类的静态变量在程序启动的时候会进行初始化来在全局map中将类名及创建实例的函数存入map中&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;相关代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;typedef void* (*register_func)();

class Class
{
public:
static void* newInstance(const string&amp;amp; class_name) {
    map&amp;lt;string, register_func&amp;gt;::iterator it = m_register.find(class_name);
    if (it == m_register.end())
        return NULL;
    else
        return it-&amp;gt;second();
}
static void registerClass(const string&amp;amp; class_name, register_func func) {
    m_register[class_name] = func;
}

private:
    /* key is class name and value is function to create instance of class */
    static map&amp;lt;string, register_func&amp;gt; m_register;
};


class Register
{
public:
    Register(const string&amp;amp; class_name, register_func func) {
        Class::registerClass(class_name, func);
    }
};

#define REGISTER_CLASS(class_name) \
    class class_name##Register { \
    public: \
        static void* newInstance() { \
            return new class_name; \
        } \
    private: \
        static const Register reg; \
    };\
const Register class_name##Register::reg(#class_name,class_name##Register::newInstance);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还需要修改工厂类的 &lt;strong&gt;createBank&lt;/strong&gt; 函数，利用Class的 &lt;strong&gt;newInstance&lt;/strong&gt; 函数来创建实例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BaseBank* createBank(const string&amp;amp; bank_name) {
    return (BaseBank*)Class::newInstance(bank_name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Class类中的 &lt;strong&gt;m_register&lt;/strong&gt; 变量是 &lt;strong&gt;static&lt;/strong&gt; 类型的map，相当于全局变量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;newInstance&lt;/strong&gt; 函数，传入类名，查找map，调用回调函数，返回一个对应类的实例。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;registerClass&lt;/strong&gt; 函数传入类名和用于创建实例的回调函数并将信息存入全局的map中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Register&lt;/strong&gt; 类只有一个构造函数，会调用Class的 &lt;strong&gt;registerClass&lt;/strong&gt; 函数完成注册。&lt;/p&gt;

&lt;p&gt;利用宏定义，在每一个需要反射的类后面额外增加一个类，其中有一个 &lt;strong&gt;Register&lt;/strong&gt; 类型的 &lt;strong&gt;static const&lt;/strong&gt; 变量，这样在程序启动的时候就会完成初始化调用 &lt;strong&gt;Register&lt;/strong&gt; 类的构造函数，完成注册。&lt;/p&gt;

&lt;p&gt;之后只需要在需要反射的类，例如在工商银行交互类 GSBank 后面加上一条宏定义：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;REGISTER_CLASS(GSBank)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以通过工厂类传入 &amp;ldquo;GSBank&amp;rdquo; 字符串获得工商银行交互类的实例。&lt;/p&gt;

&lt;h3 id=&#34;测试:b843d88db977db74e59764a23a86a6c0&#34;&gt;测试&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.fatedier.com/pic/2015/2015-03-04-decoupling-by-using-reflect-and-simple-factory-pattern-in-cpp-gsbank.jpg&#34; alt=&#34;GSBANK&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.fatedier.com/pic/2015/2015-03-04-decoupling-by-using-reflect-and-simple-factory-pattern-in-cpp-rmbank.jpg&#34; alt=&#34;RMBANK&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过传入不同的银行编码，会实例化不同的银行交互类，并且执行其对应的函数。&lt;/p&gt;

&lt;p&gt;如果需要增加新的银行接口，例如农业银行，只需要新增一个 &lt;strong&gt;NYBank&lt;/strong&gt; 类，实现具体的业务逻辑，不需要改动原来的任何代码，传入 &lt;strong&gt;NYBank&lt;/strong&gt; 字符串，就会执行农业银行相关的处理流程。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>epoll使用说明</title>
          <link>http://blog.fatedier.com/2015/01/25/introduction-of-using-epoll</link>
          <pubDate>Sun, 25 Jan 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2015/01/25/introduction-of-using-epoll</guid>
          <description>

&lt;p&gt;在《UNIX网络编程》一书中介绍了如何使用select/poll来实现I/O多路复用，简而言之就是通过内核的一种机制，监视多个文件描述符，一旦某个文件描述符处于就绪状态，就通知用户程序进行相应的读写操作，这样用户程序就不用阻塞在每一个文件描述符上。&lt;/p&gt;

&lt;p&gt;epoll相对于select/poll来说有很大优势：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不再需要每次把fd集合从用户态拷贝到内核态。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;不再需要在每次就绪时遍历fd集合中的所有fd来检查哪些fd处于就绪状态，epoll只返回就绪的fd集合。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;select一般只支持1024个文件描述符，而epoll没有类似的限制。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;epoll相关函数:a1b713ac15cbe6847c7bc66b99b440ae&#34;&gt;epoll相关函数&lt;/h3&gt;

&lt;p&gt;使用epoll只需要记住3个系统调用函数。&lt;/p&gt;

&lt;h4 id=&#34;int-epoll-create-int-size:a1b713ac15cbe6847c7bc66b99b440ae&#34;&gt;int epoll_create(int size)&lt;/h4&gt;

&lt;p&gt;创建一个epoll实例，从2.68的Linux内核开始，size参数不再生效，内核会动态分配所需的数据结构。失败返回-1，成功则该函数会返回一个文件描述符，并占用一个fd值，所以在使用完之后要记得close该文件描述符。&lt;/p&gt;

&lt;h4 id=&#34;int-epoll-ctl-int-epfd-int-op-int-fd-struct-epoll-event-event:a1b713ac15cbe6847c7bc66b99b440ae&#34;&gt;int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)&lt;/h4&gt;

&lt;p&gt;用于对epoll实例执行不同的操作的函数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;epfd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用epoll_create()返回的文件描述符&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;op&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用三个宏表示不同的操作&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;EPOLL_CTL_ADD：注册新的fd到epfd中；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;EPOLL_CTL_MOD：修改已经注册的fd的监听事件；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;EPOLL_CTL_DEL：从epfd中删除指定fd；&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;fd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;要监听的文件描述符&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;event&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;event 是与指定fd关联的epoll_event结构，包含了监听事件，附加数据&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;struct epoll_event&lt;/strong&gt; 的结构如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;typedef union epoll_data {
    void        *ptr;
    int          fd;
    __uint32_t   u32;
    __uint64_t   u64;
}epoll_data_t;
 
struct epoll_event {
    __uint32_t  events;      /* Epoll events */
    epoll_data_t data;       /* User data variable */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;这里需要特别注意的是epoll_data_t是一个union结构，fd和ptr指针只能使用一个，通常我们使用void *ptr存储需要附加的用户数据结构，然后在用户数据结构中存储int型的fd，这样在epoll_wait调用后就仍然能获得该注册事件对应的文件描述符。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;events可以是如下值的集合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）
EPOLLOUT：表示对应的文件描述符可以写
EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）
EPOLLERR：表示对应的文件描述符发生错误
EPOLLHUP：表示对应的文件描述符被挂断
EPOLLET： 将EPOLL设为边缘触发(EdgeTriggered)模式，这是相对于水平触发(Level Triggered)来说的
EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;int-epoll-wait-int-epfd-struct-epoll-event-events-int-maxevents-int-timeout:a1b713ac15cbe6847c7bc66b99b440ae&#34;&gt;int epoll_wait(int epfd, struct epoll_event * events, int maxevents,int timeout)&lt;/h4&gt;

&lt;p&gt;该函数等待epoll实例中的fd集合有就绪事件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;epfd：使用epoll_create()返回的文件描述符
events：指向处于就绪状态的事件集合
maxevents：最多maxevents数量的事件集合会被返回
timeout：超时时间，单位为毫秒；指定为-1没有超时时间，指定为0则立即返回并返回0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果成功，返回已就绪的事件的个数；如果达到超时时间仍然没有就绪事件，返回0；如果出现错误，返回-1并置errno值&lt;/p&gt;

&lt;h3 id=&#34;lt和et两种工作方式:a1b713ac15cbe6847c7bc66b99b440ae&#34;&gt;LT和ET两种工作方式&lt;/h3&gt;

&lt;p&gt;epoll 默认使用LT的工作方式，当指定事件就绪时，内核通知用户进行操作，如果你只处理了部分数据，只要对应的套接字缓冲区中还有剩余数据，下一次内核仍然还会继续通知用户去进行处理，所以使用这种模式来写程序较为简单。&lt;/p&gt;

&lt;p&gt;ET工作方式是一种高速工作方式，只能使用非阻塞socket，它的效率要比LT方式高。当一个新事件就绪时，内核通知用户进行操作，如果这时用户没有处理完缓冲区的数据，缓冲区中剩余的数据就会丢失，用户无法从下一次epoll_wait调用中获取到这个事件。&lt;/p&gt;

&lt;p&gt;举个例子，可以指定事件为 EPOLLIN| EPOLLET 来使用ET工作方式获取指定文件描述符的可读事件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在该事件就绪后，需要不断调用read函数来获取缓冲区数据，直到产生一个EAGAIN错误或者read函数返回的读取到的数据长度小于请求的数据长度时才认为此事件处理完成。write也是一样的处理方式。&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>如何处理僵尸进程</title>
          <link>http://blog.fatedier.com/2014/12/16/how-to-deal-with-zombie-process</link>
          <pubDate>Tue, 16 Dec 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/12/16/how-to-deal-with-zombie-process</guid>
          <description>

&lt;p&gt;在使用c/c++开发过程中经常会用到多进程，需要fork一些子进程，但是如果不注意的话，就有可能导致子进程结束后变成了僵尸进程。从而逐渐耗尽系统资源。&lt;/p&gt;

&lt;h3 id=&#34;什么是僵尸进程:ca7adc33bb0a44c1352770269765644c&#34;&gt;什么是僵尸进程&lt;/h3&gt;

&lt;p&gt;如果父进程在子进程之前终止，则所有的子进程的父进程都会改变为init进程，我们称这些进程由init进程领养。这时使用ps命令查看后可以看到子进程的父进程ppid已经变为了1。&lt;/p&gt;

&lt;p&gt;而当子进程在父进程之前终止时，&lt;strong&gt;内核为每个终止子进程保存了一定量的信息，所以当终止进程的父进程调用wait或waitpid时&lt;/strong&gt;，可以得到这些信息。这些信息至少包括进程ID、该进程的终止状态、以及该进程使用的CPU时间总量。其他的进程所使用的存储区，打开的文件都会被内核释放。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一个已经终止、但是其父进程尚未对其进行善后处理（获取终止子进程的有关信息，释放它仍占用的资源）的进程被称为僵尸进程。&lt;/strong&gt; ps命令将僵尸进程的状态打印为Z。&lt;/p&gt;

&lt;p&gt;可以设想一下，比如一个web服务器端，假如每次接收到一个连接都创建一个子进程去处理，处理完毕后结束子进程。假如在父进程中没有使用wait或waitpid函数进行善后，这些子进程将全部变为僵尸进程，Linux系统的进程数一般有一个固定限制值，僵尸进程将会逐渐耗尽系统资源。&lt;/p&gt;

&lt;h3 id=&#34;查看僵尸进程的例子:ca7adc33bb0a44c1352770269765644c&#34;&gt;查看僵尸进程的例子&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;errno.h&amp;gt;
 
int main(int argc, char **argv)
{
    pid_t pid;
    for (int i=0; i&amp;lt;5; i++) {
        if ((pid = fork()) &amp;lt; 0) {
            printf(&amp;quot;fork error,%s\n&amp;quot;, strerror(errno));
            return -1;
        }
        
        /* child */
        if (pid == 0) {
            sleep(1);
            exit(0);
        }
    }  
    /* parent */
    sleep(20);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译完成后，在执行程序的命令后加上 &amp;ldquo;&amp;amp;&amp;rdquo; 符号，表示让当前程序在后台运行。&lt;/p&gt;

&lt;p&gt;之后输入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ps –e –o pid,ppid,stat,command|grep [程序名]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到如下的结果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2915  1961 S    ./dd
2917  2915 Z    [dd] &amp;lt;defunct&amp;gt;
2918  2915 Z    [dd] &amp;lt;defunct&amp;gt;
2919  2915 Z    [dd] &amp;lt;defunct&amp;gt;
2920  2915 Z    [dd] &amp;lt;defunct&amp;gt;
2921  2915 Z    [dd] &amp;lt;defunct&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到5个子进程都已经是僵尸进程了。&lt;/p&gt;

&lt;h3 id=&#34;sigchld信号和处理僵尸进程:ca7adc33bb0a44c1352770269765644c&#34;&gt;SIGCHLD信号和处理僵尸进程&lt;/h3&gt;

&lt;p&gt;当子进程终止时，内核就会向它的父进程发送一个SIGCHLD信号，父进程可以选择忽略该信号，&lt;strong&gt;也可以提供一个接收到信号以后的处理函数&lt;/strong&gt;。对于这种信号的系统默认动作是忽略它。&lt;/p&gt;

&lt;p&gt;我们不希望有过多的僵尸进程产生，所以当父进程接收到SIGCHLD信号后就应该调用 wait 或 waitpid 函数对子进程进行善后处理，释放子进程占用的资源。&lt;/p&gt;

&lt;p&gt;下面是一个捕获SIGCHLD信号以后使用wait函数进行处理的简单例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;errno.h&amp;gt;
#include &amp;lt;signal.h&amp;gt;
#include &amp;lt;sys/wait.h&amp;gt;
 
void deal_child(int sig_no)
{
    wait(NULL);
}
 
int main(int argc, char **argv)
{
    signal(SIGCHLD, deal_child);
 
    pid_t pid;
    for (int i=0; i&amp;lt;5; i++) {
        if ((pid = fork()) &amp;lt; 0) {
            printf(&amp;quot;fork error,%s\n&amp;quot;,strerror(errno));
            return -1;
        }  
 
        /* child */
        if (pid == 0) {
            sleep(1);
            exit(0);
        }  
    }  
    /* parent */
    for(int i=0; i&amp;lt;100000; i++) {
        for (int j=0; j&amp;lt;100000; j++) {
            int temp = 0;
        }  
    }  
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样在后台运行后使用ps命令查看进程状态，结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;6622  1961 R    ./dd
6627  6622 Z    [dd] &amp;lt;defunct&amp;gt;
6628  6622 Z    [dd] &amp;lt;defunct&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现创建的5个进程，有3个已经被彻底销毁，但是还有2个仍然处于僵尸进程的状态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这是因为当5个进程同时终止的时候，内核都会向父进程发送SIGCHLD信号，而父进程此时有可能仍然处于信号处理的deal_child函数中，那么在处理完之前，中间接收到的SIGCHLD信号就会丢失，内核并没有使用队列等方式来存储同一种信号。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;正确地处理僵尸进程的方法:ca7adc33bb0a44c1352770269765644c&#34;&gt;正确地处理僵尸进程的方法&lt;/h3&gt;

&lt;p&gt;为了解决上面出现的这种问题，我们需要使用waitpid函数。&lt;/p&gt;

&lt;p&gt;函数原型&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;pid_t waitpid(pid_t pid, int *statloc, int options);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若成功则返回进程ID，如果设置为非阻塞方式，返回0表示子进程状态未改变，出错时返回-1。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;options参数可以设置为WNOHANG常量，表示waitpid不阻塞，如果由pid指定的子进程不是立即可用的，则立即返回0。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;只需要修改一下SIGCHLD信号的处理函数即可:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void deal_child(int sig_no)
{
    for (;;) {
        if (waitpid(-1, NULL, WNOHANG) == 0)
            break;
    }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再次执行程序后使用ps命令查看，发现已经不会产生僵尸进程了。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>能否被8整除</title>
          <link>http://blog.fatedier.com/2014/11/13/can-be-divisible-by-eight</link>
          <pubDate>Thu, 13 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/11/13/can-be-divisible-by-eight</guid>
          <description>

&lt;p&gt;题目：给定一个非负整数，问能否重排它的全部数字，使得重排后的数能被8整除。 输入格式： 多组数据，每组数据是一个非负整数。非负整数的位数不超过10000位。 输出格式 每组数据输出一行,YES或者NO，表示能否重排它的全部数字得到能被8整除的数。注意：重排可以让0开头。&lt;/p&gt;

&lt;h3 id=&#34;思路:82c26b45de3ed5f70b38a0a9fc49fa75&#34;&gt;思路&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;考虑到64位整型可以直接取余8求得结果，所以当输入非负整数位数小于20位的时候，可以直接转换成64位整型进行计算。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于一个非负整数，最后四位相当于是 p*1000 + x*100 + y*10 + z ，可以很显然的看出p*1000必然能被8整除，所以一个非负整数只需要后三位能被8整除，那么这个数就一定能被8整除。所以如果我们能从这个数中任意取出三位，作为最后三位，其值能被8整除，就输出YES，否则NO。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;没必要对可能的10000位做全排列，因为0-9每个数最多只能用3次，我们只需要遍历一遍每一位，将0-9出现的次数记录下来，最多允许记录3次。这样最坏的情况下需要对30个数进行全排列即可，效率会非常高。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;代码:82c26b45de3ed5f70b38a0a9fc49fa75&#34;&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;

#define MAX 10001

int has_num[10];    //0-9在这个数中出现的次数

bool check()
{
    int deal_num[30];   //0-9每个数最多可以用3次，只需要30的空间
    int n = 0;
    //将所有出现过数依次存放在deal_num数组中
    for (int i=0; i&amp;lt;10; i++) {
        for (int j=0; j&amp;lt;has_num[i]; j++) {
            deal_num[n] = i;
            n++;
        }
    }

    //排列任意三个数组成一个整数，其值能被8整除，返回true，否则false
    for (int i=0; i&amp;lt;n; i++) {
        for (int j=0; j&amp;lt;n; j++) {
            if (j == i)
                continue;
            for (int k=0; k&amp;lt;n; k++) {
                if (k == i || k == j) {
                    continue;
                }
                if ((deal_num[i]*100 + deal_num[j]*10 + deal_num[k]) % 8 == 0)
                    return true;
            }
        }
    }
    return false;
}

int main()
{
    char str_num[MAX];  //用于保存不超过10000位的整数
    int n;
    long long temp = 0; //如果位数小于等于19，直接转换为64位整型

    for (;;) {
        memset(str_num, 0, sizeof(str_num));
        for (int i=0; i&amp;lt;10; i++) {
            has_num[i] = 0;
        }
        if (scanf(&amp;quot;%s&amp;quot;, &amp;amp;str_num) == 1) {
            n = strlen(str_num);
            //转换为64位整型
            if (n &amp;lt;= 19) {
                sscanf(str_num, &amp;quot;%lld&amp;quot;, &amp;amp;temp);
                if ((temp % 8) == 0)
                    printf(&amp;quot;YES\n&amp;quot;);
                else
                    printf(&amp;quot;NO\n&amp;quot;);
                continue;
            }
            
            //将0-9出现的次数保存在has_num数组中，最多3次
            for (int i=0; i&amp;lt;n; i++) {
                if (has_num[(int)str_num[i] - 48] &amp;lt; 3)
                    has_num[(int)str_num[i] - 48]++;
            }
            if (check())
                printf(&amp;quot;YES\n&amp;quot;);
            else
                printf(&amp;quot;NO\n&amp;quot;);
            continue;

        } else {
            break;
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>C/C&#43;&#43;获取精确到微秒级的系统时间</title>
          <link>http://blog.fatedier.com/2014/09/30/get-systime-accurate-to-microseconds-in-c-or-cpp</link>
          <pubDate>Tue, 30 Sep 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/09/30/get-systime-accurate-to-microseconds-in-c-or-cpp</guid>
          <description>

&lt;p&gt;最近要为自己的项目开发一个日志模块，需要获取精确到微秒级的系统时间，查阅了一些资料，发现在C/C++里面可以通过 gettimeofday(struct timeval * tv,struct timezone * tz) 和 localtime(const time_t * timep) 这两个函数的配合使用来得到我想要的结果。&lt;/p&gt;

&lt;p&gt;先贴一下这两个函数的说明&lt;/p&gt;

&lt;h4 id=&#34;gettimeofday:9dfdc17010c4b06873ef31dbbc6dcd19&#34;&gt;gettimeofday&lt;/h4&gt;

&lt;p&gt;头文件：&lt;strong&gt;#include &lt;sys/time.h&gt;   #include &lt;unistd.h&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;函数定义：&lt;strong&gt;int gettimeofday (struct timeval * tv, struct timezone * tz);&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;函数说明：gettimeofday()会把目前的时间有tv 所指的结构返回，当地时区的信息则放到tz 所指的结构中。时间是从公元 1970 年1 月1 日的UTC 时间从0 时0 分0 秒算起到现在所经过的时间。&lt;/p&gt;

&lt;p&gt;timeval 结构定义为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct timeval
{
    long tv_sec;     // 秒
    long tv_usec;    // 微秒
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;timezone 结构定义为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct timezone
{
    int tz_minuteswest;  // 和格林威治时间差了多少分钟
    int tz_dsttime;      // 日光节约时间的状态
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;localtime:9dfdc17010c4b06873ef31dbbc6dcd19&#34;&gt;localtime&lt;/h4&gt;

&lt;p&gt;头文件：&lt;strong&gt;#include &lt;time.h&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;函数定义：&lt;strong&gt;struct tm *localtime (const time_t *timep);&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;函数说明：localtime()将参数timep 所指的time_t 结构中的信息转换成真实世界所使用的时间日期表示方法，然后将结果由结构tm 返回。&lt;/p&gt;

&lt;p&gt;结构tm 的定义为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int tm_sec;   // 代表目前秒数, 正常范围为0-59, 但允许至61 秒
int tm_min;   // 代表目前分数, 范围0-59
int tm_hour;  // 从午夜算起的时数, 范围为0-23
int tm_mday;  // 目前月份的日数, 范围1-31
int tm_mon;   // 代表目前月份, 从一月算起, 范围从0-11
int tm_year;  // 从1900 年算起至今的年数
int tm_wday;  // 一星期的日数, 从星期一算起, 范围为0-6
int tm_yday;  // 从今年1 月1 日算起至今的天数, 范围为0-365
int tm_isdst; // 日光节约时间的旗标
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用localtime函数的时候需要注意计算年份的时候需要加上1900，计算月份的时候需要加1。&lt;/p&gt;

&lt;h3 id=&#34;使用说明:9dfdc17010c4b06873ef31dbbc6dcd19&#34;&gt;使用说明&lt;/h3&gt;

&lt;p&gt;我们先调用gettimeofday函数获取到从公元 1970年1 月1 日的UTC 时间从0 时0 分0 秒算起到现在所经过的秒数加上微秒数，然后将秒数作为参数再调用localtime函数，转换为本地时区的当前时间即可，之后可以使用localtime函数返回的tm结构体对象来获取具体的年月日时分秒等数据。&lt;/p&gt;

&lt;h3 id=&#34;示例代码:9dfdc17010c4b06873ef31dbbc6dcd19&#34;&gt;示例代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
using namespace std;
 
string fa_getSysTime()
{
    struct timeval tv;
    gettimeofday(&amp;amp;tv,NULL);
    struct tm* pTime;
    pTime = localtime(&amp;amp;tv.tv_sec);
    
    charsTemp[30] = {0};
    snprintf(sTemp, sizeof(sTemp), &amp;quot;%04d%02d%02d%02d%02d%02d%03d%03d&amp;quot;, pTime-&amp;gt;tm_year+1900, \
    pTime-&amp;gt;tm_mon+1, pTime-&amp;gt;tm_mday, pTime-&amp;gt;tm_hour, pTime-&amp;gt;tm_min, pTime-&amp;gt;tm_sec, \
    tv.tv_usec/1000,tv.tv_usec%1000);
    return (string)sTemp;
}
 
int main()
{
    cout&amp;lt;&amp;lt; &amp;quot;当前时间：&amp;quot; &amp;lt;&amp;lt; fa_getSysTime() &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;输出为:9dfdc17010c4b06873ef31dbbc6dcd19&#34;&gt;输出为&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;当前时间：20140930110457794678
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>size() == 0和empty()的比较</title>
          <link>http://blog.fatedier.com/2014/09/26/function-size-equal-zero-compare-with-empty</link>
          <pubDate>Fri, 26 Sep 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/09/26/function-size-equal-zero-compare-with-empty</guid>
          <description>

&lt;p&gt;最近开发公司项目的时候发现大量用到了STL模板库，而且很多地方都需要判断一个容器是否为空，看到了两种写法，分别使用了容器的 size() 函数和 empty()函数。&lt;/p&gt;

&lt;p&gt;我觉得很好奇，这两种写法有什么区别呢？在网上查阅了一些资料，发现说empty()效率更高的占大多数。又查看了SGI STL的帮助文档，里面有一句话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are testing whether a container is empty, you should always write c.empty()instead of c.size() == 0. The two expressions are equivalent, but the formermay be much faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大致上的意思就是在检测容器是否为空的时候，推荐用empty()代替使用size() == 0，两者的含义是相等的，但是前者可能会更快一些。&lt;/p&gt;

&lt;p&gt;之后又在stackoverflow上看到有人提了一个类似的问题，并且贴出了STL的实现源码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool empty()const
    {return(size() == 0); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就让我更诧异了，这样的话empty()会比size() == 0更高效吗？&lt;/p&gt;

&lt;p&gt;实践是检验真理的唯一标准，那么我们就亲自来测试一下吧。&lt;/p&gt;

&lt;p&gt;为了公平起见，也为了测试方便，我分别在两个平台上进行测试，分别是Aix5.3以及Centos6.5。&lt;/p&gt;

&lt;p&gt;由于容器的内部实现的不同，我们测试三种比较典型也用的较多的容器：vector、list以及map。&lt;/p&gt;

&lt;p&gt;测试的代码如下，因为代码基本上差别不大，这里只贴一下测试vector的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;vector&amp;gt;
using namespace std;

class A
{
public:
    int a;
};

int main()
{
    cout &amp;lt;&amp;lt; &amp;quot;vector:&amp;quot; &amp;lt;&amp;lt; endl;

    long number = 20000000;
    vector&amp;lt;A&amp;gt; tmpList;
    A temp;
    temp.a = 1;

    struct timeval tv_begin, tv_end;

    //初始化tmpList中元素个数为：number
    tmpList.resize(number);

    //对size() == 0计时
    int flag = 0;
    gettimeofday(&amp;amp;tv_begin, NULL);
    for(long i=0; i&amp;lt;number*5; i++)
    {
        if(tmpList.size() == 0)
        {
        }
    }
    gettimeofday(&amp;amp;tv_end, NULL);
    cout &amp;lt;&amp;lt; &amp;quot;size() msec: &amp;quot; &amp;lt;&amp;lt; (tv_end.tv_sec - tv_begin.tv_sec)*1000 + (tv_end.tv_usec - tv_begin.tv_usec)/1000 &amp;lt;&amp;lt; endl;

    //对empty()计时
    gettimeofday(&amp;amp;tv_begin, NULL);
    for(long i=0; i&amp;lt;number*5; i++)
    {
        if(tmpList.empty())
        {
        }
    }
    gettimeofday(&amp;amp;tv_end, NULL);
    cout &amp;lt;&amp;lt; &amp;quot;empty() msec: &amp;quot; &amp;lt;&amp;lt; (tv_end.tv_sec - tv_begin.tv_sec)*1000 + (tv_end.tv_usec - tv_begin.tv_usec)/1000 &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里用到了gettimeofday这个函数用来计时，在需要计时的地方分别调用两次该函数之后得到的时间相减即可获得该代码段执行的时间。&lt;/p&gt;

&lt;p&gt;timeval结构体有两个变量分别是tv_sec和tv_usec分别是精确到秒和微秒级别。&lt;/p&gt;

&lt;p&gt;因为这两个函数本身耗时太短，不方便测算时间，所以采取重复调用再计时的方法。&lt;/p&gt;

&lt;h3 id=&#34;vector:e87a20174c7a89c9a430628f9c301c79&#34;&gt;vector&lt;/h3&gt;

&lt;h4 id=&#34;aix:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec:2736
empty() msec:4820

第2次输出：
vector:
size() msec:2762
empty() msec:4877
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;centos:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec: 298
empty() msec:1541

第2次输出：
vector:
size() msec: 283
empty() msec:1530
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list:e87a20174c7a89c9a430628f9c301c79&#34;&gt;list&lt;/h3&gt;

&lt;h4 id=&#34;aix-1:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec: 13
empty() msec: 22

第2次输出：
vector:
size() msec: 13
empty() msec: 22
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;centos-1:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec: 241696
empty() msec: 1

第2次输出：
vector:
size() msec: 242109
empty() msec: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;map:e87a20174c7a89c9a430628f9c301c79&#34;&gt;map&lt;/h3&gt;

&lt;h4 id=&#34;aix-2:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec: 1337
empty() msec: 1733

第2次输出：
vector:
size() msec: 1339
empty() msec: 1733
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;centos-2:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;第1次输出：
vector:
size() msec: 291
empty() msec: 267

第2次输出：
vector:
size() msec: 290
empty() msec: 304
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出，并非在所有情况下empty()的效率都是优于size()的。具体的效率还和所使用的平台相关，准确的说是和STL源码的实现方式有关。&lt;/p&gt;

&lt;p&gt;下面我们就一起来看一下两个系统中STL源码部分是如何实现size()和empty()的。&lt;/p&gt;

&lt;h3 id=&#34;vector源码:e87a20174c7a89c9a430628f9c301c79&#34;&gt;vector源码&lt;/h3&gt;

&lt;h4 id=&#34;aix-3:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;size_type size() const
    {return (_Size); }
 
bool empty() const
    {return (size() == 0); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出Aix上vector的empty()函数实际上是调用了size()函数进行判断，size()函数返回的是表示当前容器数量的一个变量，所以，显然，size() == 0的效率是要高于empty()的，因为少了函数调用部分的耗时。&lt;/p&gt;

&lt;h4 id=&#34;centos-3:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;size_type size() const
    { return size_type(this-&amp;gt;_M_impl._M_finish -this-&amp;gt;_M_impl._M_start); }
 
bool empty() const
    { return begin() == end(); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里size()是尾指针减去头指针得到的，而empty()是比较头指针和尾指针是否相等。在empty()里多了函数调用以及临时变量赋值等操作。&lt;/p&gt;

&lt;h3 id=&#34;list源码:e87a20174c7a89c9a430628f9c301c79&#34;&gt;list源码&lt;/h3&gt;

&lt;h4 id=&#34;aix-4:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;size_type size() const
    {return (_Size); }
 
bool empty() const
    {return (size() == 0); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aix上对于在list中的处理方式依然和vector一样，维护了一个_Size变量，empty()多了一层函数调用，效率较低。&lt;/p&gt;

&lt;h4 id=&#34;centos-4:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;size_type size() const
    { return std::distance(begin(), end()); }
 
bool empty() const
    { return this-&amp;gt;_M_impl._M_node._M_next ==&amp;amp;this-&amp;gt;_M_impl._M_node; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;size()函数调用了distance函数用遍历的方法取得两个指针间的元素个数，然后返回。而empty()函数则是判断头指针的下一个节点是否是自己本身，只需要进行一次判断。所以，当list容器元素个数较多的时候，这里的empty()效率远大于size() == 0。&lt;/p&gt;

&lt;h3 id=&#34;map源码:e87a20174c7a89c9a430628f9c301c79&#34;&gt;map源码&lt;/h3&gt;

&lt;h4 id=&#34;aix-5:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Aix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;size_type size() const
    {return (_Size); }
 
bool empty() const
    {return (size() == 0); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不出意外，可以看出Aix上依然维护了一个_Size变量，在判断的时候都是用这个变量来判断，但是empty()多了一层函数调用，所以效率上会稍微低一些。&lt;/p&gt;

&lt;h4 id=&#34;centos-5:e87a20174c7a89c9a430628f9c301c79&#34;&gt;Centos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool empty() const
    { return _M_impl._M_node_count == 0; }
 
size_type size() const
    { return _M_impl._M_node_count; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的map用到了红黑树，就不详细解释了，有兴趣的同学可以自己查阅相关资料。代码中empty()和size()用到的都是保存红黑树的节点数的变量，可以看出empty()和size() == 0两者其实是等价的。&lt;/p&gt;

&lt;h3 id=&#34;总结:e87a20174c7a89c9a430628f9c301c79&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;并不是所有的时候用empty()的效率都比size() == 0要高。&lt;/p&gt;

&lt;p&gt;例如在Aix上，由于所有的容器都维护了一个保存元素个数的值，调用size()的时候直接返回，而调用empty()的时候还是要去调用size()函数，所以会多一次函数调用的开销。在Aix上，显然使用size() == 0替代empty()将会使程序效率更高。&lt;/p&gt;

&lt;p&gt;而在Centos上，由于STL源码的实现方式不同，需要考虑到使用的容器，不同的容器调用size()和empty()的开销也不同，但是，相对来说，使用empty()的效率更加平均，例如在使用list容器的时候，如果数据量较大，size()的开销太大，而empty()则不会出现这种极端情况。&lt;/p&gt;

&lt;p&gt;如果考虑到平台迁移等等将来可能出现的状况，显然，empty()比size() == 0更加合适，可以确保你的程序不会出现太大的性能问题。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>从简单实例开始，学会写Makefile（二）</title>
          <link>http://blog.fatedier.com/2014/09/24/learn-to-write-makefile-02</link>
          <pubDate>Wed, 24 Sep 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/09/24/learn-to-write-makefile-02</guid>
          <description>

&lt;p&gt;如果文件间存在着相互之间的引用关系该怎么办？如果把.h文件和.cpp文件放在了不同的目录下该怎么办？如果我想生成静态库，然后在其他地方引用静态库该怎么办？如果我想将程序迁移到Unix平台下，使用不同的编译器，难道要依次修改所有的Makefile？&lt;/p&gt;

&lt;h3 id=&#34;d文件-解决文件间的相互引用:3da892c90f4c124b608eea75bdf80e17&#34;&gt;.d文件，解决文件间的相互引用&lt;/h3&gt;

&lt;h4 id=&#34;自动生成依赖关系:3da892c90f4c124b608eea75bdf80e17&#34;&gt;自动生成依赖关系&lt;/h4&gt;

&lt;p&gt;在前文的项目基础上，考虑一下这种情况：如果我们在w1.h文件里包含了头文件w2.h以及w3.h并且用到其中定义的函数。&lt;/p&gt;

&lt;p&gt;第一次编译没有遇到问题，但是如果后续的开发过程中修改了w2.h或者w3.h文件中的内容，再执行gmake命令的时候，就遇到问题了——w1.cpp文件不会被重新编译了！&lt;/p&gt;

&lt;p&gt;显然，我们需要将生成目标文件w1.o的规则的依赖项加上w2.h和w3.h。可是如果手动的去检查每一个文件的引用关系，然后修改Makefile文件，这样做的效率就太低了。&lt;/p&gt;

&lt;p&gt;万幸的是，编译器可以帮助我们自动生成依赖关系，只需要在编译命令中加上“-M”选项，就可以让编译器自动寻找源文件中包含的头文件，并生成一个依赖关系，例如，你可以在shell界面下敲下如下的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;g++-MM w1.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，其输出为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;w1.o:w1.cpp w2.h w3.h。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里需要特别注意的是，我们使用“-MM”而不是“-M”，因为我们使用的是GUN的C/C++编译器，使用“-M”参数会将标准库的头文件也一并包含进来，但这并不是我们想要的，而使用“-MM”则不会。&lt;/p&gt;

&lt;p&gt;现在的问题是，如何利用这个命令去写好我们的Makefile呢？&lt;/p&gt;

&lt;p&gt;GUN组织建议把每一个源文件自动生成的依赖关系放到一个.d文件中，让每一个.cpp文件都对应一个.d文件，例如之前的w1.cpp，我们可以生成一个w1.d文件，内容为自动生成的依赖关系 w1.o:w1.cpp w2.h w3.h，然后在Makefile中包含所有的.d文件，我们只需要写出.cpp文件和.d文件的依赖关系，让make自动更新或生成.d文件即可。&lt;/p&gt;

&lt;h4 id=&#34;生成-d文件:3da892c90f4c124b608eea75bdf80e17&#34;&gt;生成.d文件&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dep/%.d:%.cpp
    @if test ! -d &amp;quot;dep&amp;quot;; then\
        mkdir -p dep;\
    fi; \
    set -e; rm -f $@;
    g++ -MM $&amp;lt; &amp;gt; $@.$$$$; \
    sed &#39;s/$*\.o[ :]*/obj\/$*\.o dep\/$*\.d: /g&#39; &amp;lt; $@.$$$$ &amp;gt; $@; \
    rm -f $@.$$$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Makefile中加上如上的代码，就可以生成我们所需要的.d文件了。&lt;/p&gt;

&lt;p&gt;又是一堆莫名其妙的符号，我们还是来逐句进行分析。&lt;/p&gt;

&lt;h5 id=&#34;dep-d-cpp:3da892c90f4c124b608eea75bdf80e17&#34;&gt;dep/%.d: %.cpp&lt;/h5&gt;

&lt;p&gt;使所有的.d文件依赖于对应的.cpp文件，也就是说只要.cpp更新了，我们就重新生成对应的.d文件。这里和.o文件类似的，我们也创建一个dep目录用来存放所有的.d文件，既能保持项目文件的整洁和统一，也方便管理。&lt;/p&gt;

&lt;h5 id=&#34;if-test-d-dep-then:3da892c90f4c124b608eea75bdf80e17&#34;&gt;@if test ! -d &amp;ldquo;dep&amp;rdquo;; then&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@if test ! -d &amp;quot;dep&amp;quot;; then\
    mkdir -p dep;\
fi; \
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检查当前目录下是否存在dep目录，如果不存在，就使用mkdir命令创建dep目录。&lt;/p&gt;

&lt;h5 id=&#34;set-e-rm-f:3da892c90f4c124b608eea75bdf80e17&#34;&gt;set -e; rm -f $@;&lt;/h5&gt;

&lt;p&gt;set–e 的作用是如果命令执行出错就直接退出。$@的含义之前已经说过，这里rm –f $@的意思就是删除所有的目标文件。&lt;/p&gt;

&lt;h5 id=&#34;g-mm:3da892c90f4c124b608eea75bdf80e17&#34;&gt;g++ -MM $&amp;lt; &amp;gt; $@.$$$$; &lt;/h5&gt;

&lt;p&gt;$&amp;lt; 的含义是第一个依赖项的名称，&amp;gt; 是重定向符号，将输出结果重定向到指定文件中。$@.$$$$ 就是这个文件的文件名，其中“$$$$”表示一个随机的编号，例如如果有目标文件是w1.d，那么“$@.$$$$”一个可能的结果就是w1.d.12345。那么，这句话的含义就是将g++ -MM w1.cpp的输出结果重定向到w1.d.12345这个文件中。&lt;/p&gt;

&lt;h5 id=&#34;sed-s-o-obj-o-dep-d-g:3da892c90f4c124b608eea75bdf80e17&#34;&gt;sed &amp;rsquo;s/$&lt;em&gt;.o[ :]&lt;/em&gt;/obj\/$&lt;em&gt;.o dep\/$&lt;/em&gt;.d : /g&amp;rsquo; &amp;lt; $@.$$$$ &amp;gt; $@;&lt;/h5&gt;

&lt;p&gt;这里使用了sed这个工具对文本进行替换处理，单引号中的规则是’s/old/new/g’，s表示替换，末尾的g代表全局的意思，对文本中所有符合要求的字符串进行替换，sed会将符合old模式的字符串替换为new，具体的使用方法可以查阅一下sed这个工具的帮助文档。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;$@$$$$，将这个文件的内容作为sed工具的输入。

&amp;gt;$@，将sed处理后的内容重定向输出到这个文件中。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经过这一步的处理后，就把自动生成的依赖关系：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w1.o:w1.cpp w2.h w3.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w1.o w1.d:w1.cpp w2.h w3.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，我们的.d文件也会自动更新啦。&lt;/p&gt;

&lt;h5 id=&#34;rm-f:3da892c90f4c124b608eea75bdf80e17&#34;&gt;rm -f $@.$$$$&lt;/h5&gt;

&lt;p&gt;删除掉这个临时文件。&lt;/p&gt;

&lt;h4 id=&#34;使用include包含其他文件:3da892c90f4c124b608eea75bdf80e17&#34;&gt;使用include包含其他文件&lt;/h4&gt;

&lt;p&gt;在Makefile中我们也可以像在C++文件中那样包含其他文件。&lt;/p&gt;

&lt;p&gt;现在在我们的Makefile中加上这样一句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include w1.d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用这个语句就可以将之前我们生成的.d文件中的内容包含到当前的Makefile中。&lt;/p&gt;

&lt;p&gt;当然，也可以用这个命令来包含其他的Makefile文件。具体的用法后面再进行介绍。&lt;/p&gt;

&lt;p&gt;我们希望把所有的.d文件都包含在当前的Makefile中。&lt;/p&gt;

&lt;p&gt;先定义一个变量，存放所有的.d文件名：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEPS = $(addsuffix .d,$(addprefix dep/,$(BASE)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后使用include$(DEPS) 包含所有的.d文件。&lt;/p&gt;

&lt;h3 id=&#34;i-引用其他目录下的-h文件:3da892c90f4c124b608eea75bdf80e17&#34;&gt;-I，引用其他目录下的.h文件&lt;/h3&gt;

&lt;p&gt;考虑这种情况：现在有两个目录，一个inc目录用来存放.h文件，一个src目录，用来存放.cpp文件。怎么让编译器找到引用的.h文件在哪个目录下呢？&lt;/p&gt;

&lt;p&gt;我们可以使用“-I”选项。  格式为“-I目录名”，这样在编译的时候，编译器就会依次到我们指定的目录中寻找.h文件。&lt;/p&gt;

&lt;p&gt;同样，先定义一个变量，存放所有头文件的目录名：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INCLUDEDIR = -I../inc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后将&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g++ -c -o $@ $&amp;lt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的编译命令中写成&lt;/p&gt;

&lt;p&gt;g++ -c -o $@ $(INCLUDEDIR) $&amp;lt;&lt;/p&gt;

&lt;p&gt;OK，再来尝试用gmake命令编译一下吧，已经可以成功编译了。&lt;/p&gt;

&lt;p&gt;如果需要包含多个目录下的.h文件，可以重复使用-I选项，中间需要用空格隔开。&lt;/p&gt;

&lt;h3 id=&#34;使用静态库:3da892c90f4c124b608eea75bdf80e17&#34;&gt;使用静态库&lt;/h3&gt;

&lt;h4 id=&#34;修改生成静态库的makefile:3da892c90f4c124b608eea75bdf80e17&#34;&gt;修改生成静态库的Makefile&lt;/h4&gt;

&lt;p&gt;有的时候我们不需要生成一个可执行的程序，而是生成一个静态库文件，之后在其他的地方引用这个静态库文件。&lt;/p&gt;

&lt;p&gt;假设我们的项目目录结构是这样的，src是项目根目录，src下面有common和app以及lib两个目录，common和app下面都有inc和src两个目录。common存放公共库的源文件，app存放程序源文件，lib存放生成的静态库。&lt;/p&gt;

&lt;p&gt;修改我们在common目录下的Makefile文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;top_srcdir = ../..
#生成静态库后所存放的位置
libdir = $(top_srcdir)/lib
#静态库文件名
LIBNAME = libfa_common.a
#路径+静态库文件名
TARGET = $(libdir)/$(LIBNAME)

$(TARGET): $(OBJS)
    -rm -f $@
    ar cr $(TARGET) $(OBJS)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;top_srcdir是项目根目录的路径，使用相对路径，方便我们在后面引用其他目录。&lt;/li&gt;
&lt;li&gt;libdir是生成的静态库所存放的路径。&lt;/li&gt;
&lt;li&gt;LIBNAME是静态库名称，注意，静态库的命名必须以“lib”开头，以“.a”结尾。&lt;/li&gt;
&lt;li&gt;TARGET是目标文件名称，包含路径。&lt;/li&gt;
&lt;li&gt;在生成静态库文件的规则中，使用ar这个命令。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;修改引用静态库的makefile:3da892c90f4c124b608eea75bdf80e17&#34;&gt;修改引用静态库的Makefile&lt;/h4&gt;

&lt;p&gt;在app/src目录下的源文件中，编译的时候需要引用libfa_common.a这个静态库，这就需要我们再修改app目录下的Makefile文件。&lt;/p&gt;

&lt;p&gt;这里使用了两个新的参数，“-l”和“-L”。&lt;/p&gt;

&lt;p&gt;“-l”参数指定要引用的库的名称。例如我们要引用libfa_common.a这个静态库，那么需要在编译命令里加上“-lfa_common”，可以看出，-l后面的库名称需要去除前面的“lib”和后面的“.a”。&lt;/p&gt;

&lt;p&gt;“-L”参数指定了要引用的库的目录，用法和之前的“-I”一样。这里需要注意的是，我们需要修改一下VPATH这个变量，指明要引用的静态库的目录。类似这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VPATH:= -L $(top_srcdir)/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;完整的makefile:3da892c90f4c124b608eea75bdf80e17&#34;&gt;完整的Makefile&lt;/h3&gt;

&lt;p&gt;其实在每一个目录下的Makefile中有很多部分是重复的，我们可以考虑将重复的部分提取出来，单独放在一个公共的Makefile中，然后在其他Makefile中用include包含这个公共的Makefile即可。&lt;/p&gt;

&lt;p&gt;我写了三套Makefile，分别是Makefile（app）、Makefile（lib）、Make.rules。&lt;/p&gt;

&lt;p&gt;其中，Make.rules是公共部分，Makefile（app）是用来生成可执行程序的，Makefile（lib）是用来生成静态库的，为了以后迁移方便，考虑到Linux和Unix平台的差异，以及各个编译器之间的差异，可以将各种命令也定义成变量，之后使用宏定义进行条件编译。&lt;/p&gt;

&lt;p&gt;贴一下完整的Makefile代码。&lt;/p&gt;

&lt;h4 id=&#34;make-rules:3da892c90f4c124b608eea75bdf80e17&#34;&gt;Make.rules&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#公用Make规则配置

#设置编译器类型
CXX := g++
CC := gcc

#设置编译.d文件相关内容
DEPFLAGS := -MM
DEPFILE = $@.$$$$

#设置所有静态库文件所在位置，会根据每个Makefile文件的top_srcdir设置相对位置
LIBDIR := $(top_srcdir)/lib

#设置编译程序时需要在哪些目录查找静态库文件
LDFLAGS := -L.\
           -L$(top_srcdir)/lib

#设置VPATH，在检查依赖关系时，如果查找-lxxxx时，在哪些目录查找静态库文件
VPATH := $(LIBDIR)

#设置编译程序时查找头文件的目录位置
INCLUDEDIR := -I.\
              -I../inc\

#声明要生成的目标文件，具体规则在具体的Makefile中定义
$(TARGET):

#生成.o文件所依赖的.cpp和.c文件
obj/%.o:%.cpp
@if test ! -d &amp;quot;obj&amp;quot;; then\
    mkdir-p obj;\
fi;
$(CXX)-c -o $@ $(INCLUDEDIR) $&amp;lt;

obj/%.o:%.c
    @iftest ! -d &amp;quot;obj&amp;quot;; then\
            mkdir-p obj;\
    fi;
    $(CC)-c -o $@ $(INCLUDEDIR) $&amp;lt;

#生成.d文件,存放.cpp文件的所有依赖规则
dep/%.d: %.cpp
    @iftest ! -d &amp;quot;dep&amp;quot;; then\
            mkdir-p dep;\
    fi;\
    set-e; rm -f $@;
    $(CXX)$(DEPFLAGS) $(INCLUDEDIR) $&amp;lt; &amp;gt;$(DEPFILE); \
    sed&#39;s/$*\.o[ :]*/obj\/$*\.o dep\/$*\.d : /g&#39; &amp;lt; $@.$$$$ &amp;gt; $@;\
    rm-f $@.$$$$

#生成.d文件,存放.c文件的所有依赖规则
dep/%.d: %.c
    @iftest ! -d &amp;quot;dep&amp;quot;; then\
            mkdir-p dep;\
    fi;\
    set-e; rm -f $@;
    $(CC)$(DEPFLAGS) $(INCLUDEDIR) $&amp;lt; &amp;gt; $(DEPFILE); \
    sed&#39;s/$*\.o[ :]*/obj\/$*\.o dep\/$*\.d : /g&#39; &amp;lt; $@.$$$$ &amp;gt; $@; \
    rm-f $@.$$$$

include $(DEPS)

#检测是否有文件被修改，只要有就全部编译
all: $(SRCS) $(TARGETS)

#清除编译文件
.PHONY:clean
clean:
    -rm-f $(TARGET)
    -rm-f obj/*.o
    -rm-f dep/*.d
    -rm-f core
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;makefile-lib:3da892c90f4c124b608eea75bdf80e17&#34;&gt;Makefile（lib）&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#需要生成静态库的Makefile

#程序根目录
top_srcdir         =../../..

#生成静态库后所存放的位置
libdir = $(top_srcdir)/lib
#静态库文件名
LIBNAME          =libfa_common.a
#路径+静态库文件名
TARGET           =$(libdir)/$(LIBNAME)

CPP_FILES = $(shell ls *.cpp)
C_FILES = $(-shell ls *.c)
SRCS = $(CPP_FILES) $(C_FILES)
BASE = $(basename $(SRCS))
OBJS = $(addsuffix .o, $(addprefixobj/,$(BASE)))
DEPS = $(addsuffix .d, $(addprefixdep/,$(BASE)))

#包含公共Make规则
include$(top_srcdir)/makeinclude/Make.rules

#设置头文件及库文件的位置
INCLUDEDIR := $(INCLUDEDIR)

$(TARGET): $(OBJS)
    -rm-f $@
    ar cr $(TARGET) $(OBJS)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;makefile-app:3da892c90f4c124b608eea75bdf80e17&#34;&gt;Makefile（app）&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#需要生成可执行程序的Makefile

#程序根目录
top_srcdir         =../../..

#目标程序名
TARGET = test

CPP_FILES = $(shell ls *.cpp)
C_FILES = $(-shell ls *.c)
SRCS = $(CPP_FILES) $(C_FILES)
BASE = $(basename $(SRCS))
OBJS = $(addsuffix .o, $(addprefixobj/,$(BASE)))
DEPS = $(addsuffix .d, $(addprefixdep/,$(BASE)))

#包含公共Make规则
include $(top_srcdir)/makeinclude/Make.rules

#额外需要包含的头文件的目录位置
INCLUDEDIR := $(INCLUDEDIR)\
              -I$(top_srcdir)/src/common/inc\

#所有要包含的静态库的名称
LIBS := -lfa_common

#设置目标程序依赖的.o文件
$(TARGET):$(OBJS) $(LIBS)
    -rm-f $@
    $(CXX)-o $(TARGET) $(INCLUDEDIR) $(LDFLAGS) $(OBJS) $(LIBS)
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>从简单实例开始，学会写Makefile（一）</title>
          <link>http://blog.fatedier.com/2014/09/08/learn-to-write-makefile-01</link>
          <pubDate>Mon, 08 Sep 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/09/08/learn-to-write-makefile-01</guid>
          <description>

&lt;p&gt;作为一个刚刚从大学毕业的新人，进公司不久就遇到了一个不大不小的门槛——看不懂Makefile！而Makefile所干的事却关系到程序的编译和链接，一个好的Makefile文件可以极大地提升编译项目文件的效率，免去手动编译的烦恼。&lt;/p&gt;

&lt;p&gt;不会写Makefile虽然还不至于影响到项目进度，从别的地方拷贝一份过来稍加修改就可以用了，但是，对于咱们“程序猿”来说这实在是一件让人感觉很不爽的事。于是，百度，谷歌（PS：吐槽一下，不XX的话Google已经完全不能用了，Bing的效果都要比百度好一些），各种看资料，看大牛的博客，或许是本人比较笨，也或许是网上的资料不太适合咱们这种新人，缺乏生动的实例讲解，所以决定自己动手研究一下，并把过程分享给大家，希望新人们看完这篇文章后就能够自己动手，为自己的项目编写合适的Makefile啦。&lt;/p&gt;

&lt;h3 id=&#34;为什么要写makefile:faa200a09f18bf5060563b9fc5d15373&#34;&gt;为什么要写Makefile&lt;/h3&gt;

&lt;p&gt;首先要确定我们的目标，Makefile是用来干嘛的？&lt;/p&gt;

&lt;p&gt;曾经很长时间我都是在从事Windows环境下的开发，所以根本不知道Makefile是个什么东西。因为早已经习惯了使用VS、Eclipse等等优秀的IDE做开发，只要点一个按钮，程序就可以运行啦。但是进入公司以后，从事的是Unix环境下的开发工作，没有了IDE，要怎么才能让我写的代码编译后运行呢？&lt;/p&gt;

&lt;p&gt;在这里，Makefile的作用就体现出来了，简单的四个字—— “自动编译”。一旦整个项目的Makefile都写好了以后，只需要一个简单的make命令，就可以实现自动编译了。当然，准确的说，是make这个命令工具帮助我们实现了我们想要做的事，而Makefile就相当于是一个规则文件，make程序会按照Makefile所指定的规则，去判断哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译。&lt;/p&gt;

&lt;p&gt;俗话说，懒人创造了整个世界，程序员就是在不断偷懒的过程中获得进步，使用Makefile最根本的目的就是简化我们的工作。&lt;/p&gt;

&lt;p&gt;下面我们就从头开始，一步一步的去学习如何写好一个Makefile文件吧！&lt;/p&gt;

&lt;h3 id=&#34;从单个文件开始:faa200a09f18bf5060563b9fc5d15373&#34;&gt;从单个文件开始&lt;/h3&gt;

&lt;h4 id=&#34;1-单个文件的编译:faa200a09f18bf5060563b9fc5d15373&#34;&gt;1、单个文件的编译&lt;/h4&gt;

&lt;p&gt;为了便于大家学习，这篇文章是以常见的Linux平台为基础的，系统为Centos6.5，使用GNU make工具进行编译，项目文件为C++格式。这里假定看到这篇文章的都是已经对C++程序的编译等基础知识和相关命令有了一定的了解的，鉴于篇幅限制，如果还有不清楚的就请自行查阅相关资料啦。&lt;/p&gt;

&lt;p&gt;假设我们在src目录下有一个test.cpp文件，我们是如何编译它的呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;g++ -o test test.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在shell界面执行这句命令，当前目录下会生成一个名为test的可执行程序，使用./test就可以执行该程序，看到输出结果。&lt;/p&gt;

&lt;p&gt;现在我们尝试使用编写Makefile的方式来实现这一编译过程。 首先在当前目录下新建文件并命名为“Makefile”，这样编译的时候直接使用gmake命令即可，默认使用“Makefile”文件进行编译，也可以是其他名字，那样的话需要使用“gmake -f 文件名”的格式来指定Makefile文件。&lt;/p&gt;

&lt;p&gt;Makefile文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test:test.cpp
    g++-o test test.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在shell界面下执行gmake命令，敲下回车，OK。&lt;/p&gt;

&lt;p&gt;可以发现，g++ -o test test.cpp 这条命令已经被自动执行了，生成了名为test的程序。&lt;/p&gt;

&lt;h4 id=&#34;2-makefile的描述规则:faa200a09f18bf5060563b9fc5d15373&#34;&gt;2、Makefile的描述规则&lt;/h4&gt;

&lt;p&gt;至此，我们已经完成了一个最简单的Makefile文件，向我们的最终目标迈出了一大步！&lt;/p&gt;

&lt;p&gt;有的人会问，传说中的自动化编译呢？难道每一个文件都要自己去写文件名和命令？&lt;/p&gt;

&lt;p&gt;不用急，我们先来分析一下这个Makefile文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TARGET... :PREREQUISITES...
    COMMAND
    ...
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是最简单的Makefile文件的描述规则，可以说，这也是Makefile中最精华的部分，其他部分都是围绕着这个最基本的描述规则的。先来解释一下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TARGET：规则生成的目标文件，通常是需要生成的程序名（例如前面出现的程序名test）或者过程文件（类似.o文件）。&lt;/li&gt;
&lt;li&gt;PREREQUISITES：规则的依赖项，比如前面的Makefile文件中我们生成test程序所依赖的就是test.cpp。&lt;/li&gt;
&lt;li&gt;COMMAND：规则所需执行的命令行，通常是编译命令。这里需要注意的是每一行命令都需要以[TAB]字符开头。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再来看我们之前写过的Makefile文件，这个规则，用通俗的自然语言翻译过来就是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果目标test文件不存在，根据规则创建它。&lt;/li&gt;
&lt;li&gt;目标test文件存在，并且test文件的依赖项中存在任何一个比目标文件更新（比如修改了一个函数，文件被更新了），根据规则重新生成它。&lt;/li&gt;
&lt;li&gt;目标test文件存在，并且它比所有的依赖项都更新，那么什么都不做。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当我们第一次执行gmake命令时，test文件还不存在，所以就会执行g++-o test test.cpp这条命令创建test文件。&lt;/p&gt;

&lt;p&gt;而当我们再一次执行gmake时，会提示文件已经是最新的，什么都不做。&lt;/p&gt;

&lt;p&gt;这时候，如果修改了test.cpp命令，再次执行gmake命令。&lt;/p&gt;

&lt;p&gt;由于依赖项比目标文件更新，g++ -o test test.cpp这条命令就又会被再一次执行。&lt;/p&gt;

&lt;p&gt;现在，我们已经学会如何写一个简单的Makefile文件了，每次修改过源文件以后，只要执行gmake命令就可以得到我们想要生成的程序，而不需要一遍遍地重复敲g++ -o test test.cpp这个命令。&lt;/p&gt;

&lt;h3 id=&#34;多个文件的编译:faa200a09f18bf5060563b9fc5d15373&#34;&gt;多个文件的编译&lt;/h3&gt;

&lt;h4 id=&#34;1-使用命令行编译多个文件:faa200a09f18bf5060563b9fc5d15373&#34;&gt;1、使用命令行编译多个文件&lt;/h4&gt;

&lt;p&gt;一个项目不可能只有一个文件，学会了单个文件的编译，自然而然就要考虑如何去编译多个文件呢？&lt;/p&gt;

&lt;p&gt;同样，假设当前目录下有如下7个文件，test.cpp、w1.h、w1.cpp、w2.h、w2.cpp、w3.h、w3.cpp。其中test.cpp包含main函数，并且引用了w1.h、w2.h以及w3.h。我们需要生成的程序名为test。&lt;/p&gt;

&lt;p&gt;在shell界面下，为了正确编译我们的项目，我们需要敲下如下的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;g++ -c -o w1.ow1.cpp
g++ -c -o w2.o w2.cpp
g++ -c -o w3.o w3.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时当前目录下会生成w1.o、w2.o、w3.o三个.o文件。这里需要注意的是，“-c”命令是只编译，不链接，通常生成.o文件的时候使用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;g++ -o testtest.cpp w1.o w2.o w3.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行完这条命令后，编译成功，得到了我们想要的test文件。&lt;/p&gt;

&lt;h4 id=&#34;2-使用makefile编译多个文件:faa200a09f18bf5060563b9fc5d15373&#34;&gt;2、使用Makefile编译多个文件&lt;/h4&gt;

&lt;p&gt;既然单个文件的Makefile会写了，相信多个文件举一反三也不是问题了。&lt;/p&gt;

&lt;p&gt;Makefile具体内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test:test.cppw1.o w2.o w3.o
    g++ -o test test.cpp w1.o w2.o w3.o
w1.o:w1.cpp
    g++ -c -o w1.o w1.cpp
w2.o:w2.cpp
    g++ -c -o w2.o w2.cpp
w3.o:w3.cpp
    g++ -c -o w3.o w3.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里需要注意的是，我们写的第一个规则的目标，将会成为“终极目标”，也就是我们最终希望生成的程序，这里是“test”文件。根据我们的“终极目标”，make会进行自动推导，例如“终极目标”依赖于的.o文件，make就会寻找生成这些.o文件的规则，然后执行相应的命令去生成这些文件，这样一层一层递归地进行下去，直到最终生成了“终极目标”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.fatedier.com/pic/2014/2014-09-08-learn-to-write-makefile-01-gmake-target.jpg&#34; alt=&#34;gmake-target&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，虽然生成test文件的规则写在最前面，但是由于依赖于w1.o、w2.o、w3.o，make会先执行生成w1.o、w2.o、w3.o所需的命令，然后才会执行g++ -o test test.cpp w1.o w2.o w3.o 来生成test文件。&lt;/p&gt;

&lt;h4 id=&#34;3-使用伪目标来清除过程文件:faa200a09f18bf5060563b9fc5d15373&#34;&gt;3、使用伪目标来清除过程文件&lt;/h4&gt;

&lt;p&gt;我们现在已经可以自动编译多个文件的项目了，但是当我们需要全部重新编译的时候，难道还要手动地一个一个去删除那些生成的.o文件吗？&lt;/p&gt;

&lt;p&gt;既然已经使用了Makefile，我们的目标就是实现自动化编译，那么这些清除过程文件这点小事必须得能够用一个命令搞定啦。&lt;/p&gt;

&lt;p&gt;我们只需要在Makefile文件的最后加上如下几行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;clean:
    -rm–f test *.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK，轻松搞定，然后在shell界面下执行gmakeclean。仔细看看，是不是所有的.o文件和最后生成的程序文件已经被清除了？&lt;/p&gt;

&lt;p&gt;这里说明一下，rm是Linux下删除文件或目录的命令，前面加上“-”符号意思是忽略执行rm产生的错误。“-f”参数是指强制删除，忽略不存在的文件。&lt;/p&gt;

&lt;p&gt;这样的目标叫做“伪目标”，通过“gmake 目标名”来指定这个目标，然后执行这个目标规则下的命令。&lt;/p&gt;

&lt;h3 id=&#34;使用变量简化makefile:faa200a09f18bf5060563b9fc5d15373&#34;&gt;使用变量简化Makefile&lt;/h3&gt;

&lt;p&gt;作为一个“懒惰”的程序员，现在问题又来了。如果按照上面的写法，在文件数量和名称不变的情况的下确实是没有问题，但是如果我们新增一个文件的话，岂不是又要去修改Makefile了，一个项目多的可能有成百上千的文件，这样管理起来得有多麻烦呀！&lt;/p&gt;

&lt;p&gt;还记得我们在Linux下如果要查看当前目录下所有的cpp文件的时候，使用的命令吗？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls *.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过这个命令，我们就可以将所有的cpp文件名称显示在界面上。而在Makefile中我们同样可以使用类似的规则来做简化，进一步减少后续开发过程中对Makefile文件的修改。&lt;/p&gt;

&lt;p&gt;修改后的Makefile文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TARGET = test

CPP_FILES = $(shell ls *.cpp)
BASE = $(basename $(CPP_FILES))
OBJS = $(addsuffix .o, $(addprefix obj/,$(BASE)))
 
$(TARGET):$(OBJS)
    -rm -f $@
    g++ -o $(TARGET)$(OBJS)
 
obj/%.o:%.cpp
    @if test ! -d&amp;quot;obj&amp;quot;; then\
    mkdir -pobj;\
    fi;
    g++ -c -o $@ $&amp;lt;
 
clean:
    -rm -f test
    -rm -f obj/*.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是不是瞬间有种摸不着头脑的感觉？别急，这是因为我们用到了一些新的语法和命令，其实，本质上和我们之前所写的Makefile文件是一个意思，下面我们就逐条来进行分析。&lt;/p&gt;

&lt;h5 id=&#34;target-test:faa200a09f18bf5060563b9fc5d15373&#34;&gt;TARGET = test&lt;/h5&gt;

&lt;p&gt;定义一个变量，保存目标文件名，这里我们需要生成的程序名就叫test。&lt;/p&gt;

&lt;h5 id=&#34;cpp-files-shell-ls-cpp:faa200a09f18bf5060563b9fc5d15373&#34;&gt;CPP_FILES = $(shell ls *.cpp)&lt;/h5&gt;

&lt;p&gt;定义一个变量，内容为所有的以.cpp为后缀的文件的文件名，以空格隔开。&lt;/p&gt;

&lt;p&gt;这里&amp;amp;(shell 命令)的格式，说明这里将会用shell命令执行后输出的内容进行替换，就和在命令行下输入ls *.cpp得到的结果一样。&lt;/p&gt;

&lt;h5 id=&#34;base-basename-cpp-files:faa200a09f18bf5060563b9fc5d15373&#34;&gt;BASE = $(basename $(CPP_FILES))&lt;/h5&gt;

&lt;p&gt;定义一个变量，内容为所有的以.cpp为后缀的文件的文件名去除掉后缀部分。&lt;/p&gt;

&lt;p&gt;$(CPP_FILES)是引用CPP_FIFES这个变量的内容，相信学过如何写shell命令的同学肯定不会陌生。basename 是一个函数，其作用就是去除掉文件名的后缀部分，例如“test.cpp”，经过这一步后就变成了“test”。&lt;/p&gt;

&lt;h5 id=&#34;objs-addsuffix-o-addprefix-obj-base:faa200a09f18bf5060563b9fc5d15373&#34;&gt;OBJS = $(addsuffix .o, $(addprefix obj/,$(BASE)))&lt;/h5&gt;

&lt;p&gt;定义一个变量，内容为所有的以.cpp为后缀的文件去除调后缀部分后加上“.o”。&lt;/p&gt;

&lt;p&gt;和basename一样，addsuffix和addprefix同样也是调用函数。addprefix的作用是给每个文件名加上前缀，这里是加上“obj/”，而addsuffix的作用是给每个文件名加上后缀，这里是在文件名后加上“.o”。例如“test”，经过变换后变成了“obj/test.o”。&lt;/p&gt;

&lt;p&gt;为什么要在文件名前加上“obj/”？&lt;/p&gt;

&lt;p&gt;这个不是必须的，只是我自己觉得将所有的.o文件放在一个obj目录下统一管理会让目录结构显得更加清晰，包括以后的.d文件会统一放在dep目录下一样。当然，你也可以选择不这样做，而是全部放在当前目录下。&lt;/p&gt;

&lt;h5 id=&#34;target-objs:faa200a09f18bf5060563b9fc5d15373&#34;&gt;$(TARGET):$(OBJS)&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$(TARGET):$(OBJS)
    -rm -f $@
    g++ -o $(TARGET) $(OBJS)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个描述规则和我们之前写过的很像，只不过，使用了变量进行替换。其中需要注意的是$@这个奇怪的符号，它的含义是这个规则的目标文件的名称，在这里就相当于是$(TARGET)。&lt;/p&gt;

&lt;p&gt;把这里的变量替换成我们之前项目中的实际值，就相当于：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test:test.ow1.o w2.o w3.o
    -rm-f test
    g++ -o test test.o w1.o w2.o w3.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果按照这种写法，当我们新增了一个w4.cpp文件的时候，就需要对Makefile进行修改，而如果我们使用了变量进行替换，那么我们就什么都不用做，直接再执行一遍gmake命令即可。&lt;/p&gt;

&lt;h5 id=&#34;obj-o-cpp:faa200a09f18bf5060563b9fc5d15373&#34;&gt;obj/%.o:%.cpp&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obj/%.o:%.cpp
    @if test ! -d&amp;quot;obj&amp;quot;; then\
        mkdir -p obj;\
    fi;
    g++ -c -o $@ $&amp;lt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是依次生成所有cpp文件所对应的.o文件的规则。&lt;/p&gt;

&lt;p&gt;%.o和%.c表示以.o和.c结尾的文件名。因为我们准备把所有的.o文件放在obj目录下，所以这里在“%.o”前面加上前缀“obj/”。&lt;/p&gt;

&lt;p&gt;下面命令行的前三行，具体的作用是检查当前目录下是否有名为“obj”的目录，如果没有，则使用mkdir命令创建这个目录。如果不了解的同学不如先去看一下shell编程的相关知识吧。&lt;/p&gt;

&lt;p&gt;最后一句中的$@前面已经解释过了，是代表规则的目标文件名称，而$&amp;lt;与之对应的，则是代表规则的依赖项中第一个依赖文件的名称。&lt;/p&gt;

&lt;p&gt;例如obj/test.o:test.cpp&lt;/p&gt;

&lt;p&gt;那么$@的值为“test.o”，$&amp;lt;的值为“test.cpp”&lt;/p&gt;

&lt;h5 id=&#34;clean:faa200a09f18bf5060563b9fc5d15373&#34;&gt;clean:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;clean:
    -rm -f test
    -rm -f obj/*.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个就没什么好说的啦，这里只是修改了一下.o文件的路径。&lt;/p&gt;

&lt;p&gt;到这里，相信你对如何使用Makefile来编译一个小的项目已经颇有些眉目了吧。使用这个Makefile文件，不管你往这个目录下加多少文件，轻轻松松一个gmake命令搞定，不需要再因为加了一个新的文件而去修改Makefile了。&lt;/p&gt;

&lt;p&gt;但是，你难道没有觉得仍然存在着很多问题吗？&lt;/p&gt;

&lt;p&gt;如果文件间存在着相互之间的引用关系该怎么办？&lt;/p&gt;

&lt;p&gt;如果把.h文件和.cpp文件放在了不同的目录下该怎么办？&lt;/p&gt;

&lt;p&gt;如果我想生成静态库，然后在其他地方引用静态库该怎么办？&lt;/p&gt;

&lt;p&gt;如果我想将程序迁移到Unix平台下，使用不同的编译器，难道要依次修改所有的Makefile？&lt;/p&gt;

&lt;p&gt;大家可以先尝试着自己解决以上的问题，在之后的篇幅中我们会就以上几点继续通过举例的方式来加以解决。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
