<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>service mesh on fatedier blog</title>
    <link>https://blog.fatedier.com/tags/service-mesh/</link>
    <description>Recent content in service mesh on fatedier blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Thu, 02 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.fatedier.com/tags/service-mesh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Istio 1.9 升级 1.10 ExternalAuthorization 失效的问题</title>
      <link>https://blog.fatedier.com/2021/09/02/istio-upgrade-from-1-19-to-1-20-external-authorization-invalid/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2021/09/02/istio-upgrade-from-1-19-to-1-20-external-authorization-invalid/</guid>
      <description>&lt;p&gt;近期在将 Istio 1.9.1 升级到 1.10.4。发现原来在 1.9 版本中生效的 ExternalAuthorization 的功能在控制面升级到 1.10，数据面保持在 1.9 版本时，会失效。所有的请求都不需要鉴权就能访问到后端服务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Istio sidecar 容器启动停止问题</title>
      <link>https://blog.fatedier.com/2021/08/26/istio-sidecar-container-start-and-stop-problem/</link>
      <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2021/08/26/istio-sidecar-container-start-and-stop-problem/</guid>
      <description>&lt;p&gt;由于引入了 sidecar，会通过 iptables 规则将流量劫持到 sidecar 中的进程。但是 K8s 上并没有精确控制 sidecar 的能力，导致由于 sidecar 与主容器的启停顺序问题会引起一些非预期的行为。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Service Mesh 探索之升级 HTTP/2 协议</title>
      <link>https://blog.fatedier.com/2019/01/12/service-mesh-explore-upgrade-http2/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2019/01/12/service-mesh-explore-upgrade-http2/</guid>
      <description>&lt;p&gt;HTTP/2 是 HTTP/1.1 的升级，在请求方法、状态码乃至 URI 和绝大多数 HTTP 头部字段等方面保持高度兼容性，同时能够减少网络延迟和连接资源占用。Service Mesh 架构中，由于两个服务之间的通信由 proxy 介入，对于依靠 HTTP/1.1 通信的服务来说，可以无缝升级到 HTTP/2 协议。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Service Mesh 探索之优先本地访问</title>
      <link>https://blog.fatedier.com/2018/12/01/service-mesh-explore-local-node-lb/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2018/12/01/service-mesh-explore-local-node-lb/</guid>
      <description>&lt;p&gt;在设计 Service Mesh 架构方案时，考虑到有一些基础服务，访问频率高，流量大，如果在 kubernetes 平台上采用 DaemonSet 的部署方式，每一个机器部署一个实例，访问方能够优先访问同一个节点上的该服务，则可以极大地减少网络开销和延迟。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Service Mesh 探索之流量劫持</title>
      <link>https://blog.fatedier.com/2018/11/21/service-mesh-traffic-hijack/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2018/11/21/service-mesh-traffic-hijack/</guid>
      <description>&lt;p&gt;Istio 的项目中有一个亮点就是可以将旧的应用无缝接入到 Service Mesh 的平台上来，不用修改一行代码。实现这个功能，目前主要是通过 iptables 来截获流量转发给 proxy。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Service Mesh 自研实践</title>
      <link>https://blog.fatedier.com/2018/10/15/self-designed-service-mesh/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2018/10/15/self-designed-service-mesh/</guid>
      <description>&lt;p&gt;最近都在做自研 Service Mesh 方案的落地和后续迭代优化，目前稳定承接了旧系统的大部分流量，这里分享一下这套架构，以及过程中的思考和遇到的一些问题。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
