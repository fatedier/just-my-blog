<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on fatedier blog</title>
    <link>https://blog.fatedier.com/tags/kubernetes/</link>
    <description>Recent content in kubernetes on fatedier blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Wed, 22 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.fatedier.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes 中支持 Pod 定向迁移</title>
      <link>https://blog.fatedier.com/2020/07/22/k8s-pod-directional-migration/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2020/07/22/k8s-pod-directional-migration/</guid>
      <description>&lt;p&gt;原生的 K8s 并不支持将指定的 Pod 从当前节点迁移到另外一个指定的节点上。但是我们可以基于 K8s 提供的扩展能力来实现对这一功能的支持。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes 挂载 subpath 的容器在 configmap 变更后重启时挂载失败</title>
      <link>https://blog.fatedier.com/2020/04/17/pod-loopcrash-of-k8s-subpath/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2020/04/17/pod-loopcrash-of-k8s-subpath/</guid>
      <description>&lt;p&gt;Kubernetes 对于挂载了 subpath 的容器，在 configmap 或其他 volume 变更后，如果容器因为意外退出后，就会持续 crash，无法正常启动。&lt;/p&gt;
&lt;p&gt;当前 Kubernetes 已经发布了 1.18 版本，这个问题仍然存在。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes 自定义控制器的高可用</title>
      <link>https://blog.fatedier.com/2019/04/17/k8s-custom-controller-high-available/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2019/04/17/k8s-custom-controller-high-available/</guid>
      <description>&lt;p&gt;自定义 controller 通常要求只能有一个实例在工作，但是为了保证高可用，就需要有一个选主的机制，保证在 leader 因为某个异常挂掉后，其他节点可以提升为 leader，然后正常工作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes 自定义控制器</title>
      <link>https://blog.fatedier.com/2019/04/02/k8s-custom-controller/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2019/04/02/k8s-custom-controller/</guid>
      <description>&lt;p&gt;kubernetes 的 controller-manager 通过 APIServer 实时监控内部资源的变化情况，通过各种操作将系统维持在一个我们预期的状态上。比如当我们将 Deployment 的副本数增加时，controller-manager 会监听到此变化，主动创建新的 Pod。&lt;/p&gt;
&lt;p&gt;对于通过 CRD 创建的资源，也可以创建一个自定义的 controller 来管理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes CRD 权限管理</title>
      <link>https://blog.fatedier.com/2019/03/25/k8s-crd-authorization/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2019/03/25/k8s-crd-authorization/</guid>
      <description>&lt;p&gt;对于一个多个用户的集群而言，通常单个用户只有自己 namespace 的相关权限，而 kubernetes CRD 需要配置额外的权限才能使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes 自定义资源(CRD)</title>
      <link>https://blog.fatedier.com/2019/03/20/k8s-crd/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2019/03/20/k8s-crd/</guid>
      <description>&lt;p&gt;在研究 Service Mesh 的过程中，发现 Istio 很多参数都通过 kubernetes CRD 来管理，例如 VirtualService 和 DestinationRule，这种方式使部署在 k8s 集群上的服务的管理方式更趋向一致。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Service Mesh 探索之升级 HTTP/2 协议</title>
      <link>https://blog.fatedier.com/2019/01/12/service-mesh-explore-upgrade-http2/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2019/01/12/service-mesh-explore-upgrade-http2/</guid>
      <description>&lt;p&gt;HTTP/2 是 HTTP/1.1 的升级，在请求方法、状态码乃至 URI 和绝大多数 HTTP 头部字段等方面保持高度兼容性，同时能够减少网络延迟和连接资源占用。Service Mesh 架构中，由于两个服务之间的通信由 proxy 介入，对于依靠 HTTP/1.1 通信的服务来说，可以无缝升级到 HTTP/2 协议。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 telepresence 在 k8s 环境中实现快速开发</title>
      <link>https://blog.fatedier.com/2019/01/03/using-telepresence-for-quick-dev-in-k8s/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2019/01/03/using-telepresence-for-quick-dev-in-k8s/</guid>
      <description>&lt;p&gt;随着容器化，微服务的概念逐渐成为主流，在日常的开发测试中，会遇到一些新的问题。例如如果服务跑在 istio 这样的 ServiceMesh 平台上，依赖于 k8s 的 sidecar 功能，在本地模拟这样的场景来调试和测试是比较复杂的。而 telepresence 帮助我们缓解了这样的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes 中删除 pod 导致客户端连接不存在的 IP 超时问题</title>
      <link>https://blog.fatedier.com/2018/12/10/a-connect-timeout-problem-caused-by-k8s-pod-deleting/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2018/12/10/a-connect-timeout-problem-caused-by-k8s-pod-deleting/</guid>
      <description>&lt;p&gt;在 k8s 平台测试自研 Service Mesh 方案时，发现更新服务时，会有少量请求耗时剧增。跟踪排查后确认是由于 Pod 被删除后，原先的 Pod 的 IP 不存在，客户端建立连接超时引起。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Service Mesh 探索之优先本地访问</title>
      <link>https://blog.fatedier.com/2018/12/01/service-mesh-explore-local-node-lb/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2018/12/01/service-mesh-explore-local-node-lb/</guid>
      <description>&lt;p&gt;在设计 Service Mesh 架构方案时，考虑到有一些基础服务，访问频率高，流量大，如果在 kubernetes 平台上采用 DaemonSet 的部署方式，每一个机器部署一个实例，访问方能够优先访问同一个节点上的该服务，则可以极大地减少网络开销和延迟。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Service Mesh 探索之流量劫持</title>
      <link>https://blog.fatedier.com/2018/11/21/service-mesh-traffic-hijack/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2018/11/21/service-mesh-traffic-hijack/</guid>
      <description>&lt;p&gt;Istio 的项目中有一个亮点就是可以将旧的应用无缝接入到 Service Mesh 的平台上来，不用修改一行代码。实现这个功能，目前主要是通过 iptables 来截获流量转发给 proxy。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Service Mesh 自研实践</title>
      <link>https://blog.fatedier.com/2018/10/15/self-designed-service-mesh/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2018/10/15/self-designed-service-mesh/</guid>
      <description>&lt;p&gt;最近都在做自研 Service Mesh 方案的落地和后续迭代优化，目前稳定承接了旧系统的大部分流量，这里分享一下这套架构，以及过程中的思考和遇到的一些问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes 初探及部署实践</title>
      <link>https://blog.fatedier.com/2016/06/24/demystifying-kubernetes-and-deployment/</link>
      <pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fatedier.com/2016/06/24/demystifying-kubernetes-and-deployment/</guid>
      <description>&lt;p&gt;Kubernetes 是 Google 开源的容器集群管理系统，作为 Go 语言开发的热门项目之一，它提供了应用部署、维护、 扩展机制等功能，利用 Kubernetes 能够方便地管理跨机器运行的容器化应用，目前主要是针对 Docker 的管理。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>