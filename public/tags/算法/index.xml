<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fatedier&#39;s blog </title>
    <link>http://blog.fatedier.com/tags/%E7%AE%97%E6%B3%95/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2015</rights>
    <updated>2014-11-13 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>能否被8整除</title>
          <link>http://blog.fatedier.com/2014/11/13/can-be-divisible-by-eight</link>
          <pubDate>Thu, 13 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://blog.fatedier.com/2014/11/13/can-be-divisible-by-eight</guid>
          <description>

&lt;p&gt;题目：给定一个非负整数，问能否重排它的全部数字，使得重排后的数能被8整除。 输入格式： 多组数据，每组数据是一个非负整数。非负整数的位数不超过10000位。 输出格式 每组数据输出一行,YES或者NO，表示能否重排它的全部数字得到能被8整除的数。注意：重排可以让0开头。&lt;/p&gt;

&lt;h3 id=&#34;思路:82c26b45de3ed5f70b38a0a9fc49fa75&#34;&gt;思路&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;考虑到64位整型可以直接取余8求得结果，所以当输入非负整数位数小于20位的时候，可以直接转换成64位整型进行计算。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于一个非负整数，最后四位相当于是 p*1000 + x*100 + y*10 + z ，可以很显然的看出p*1000必然能被8整除，所以一个非负整数只需要后三位能被8整除，那么这个数就一定能被8整除。所以如果我们能从这个数中任意取出三位，作为最后三位，其值能被8整除，就输出YES，否则NO。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;没必要对可能的10000位做全排列，因为0-9每个数最多只能用3次，我们只需要遍历一遍每一位，将0-9出现的次数记录下来，最多允许记录3次。这样最坏的情况下需要对30个数进行全排列即可，效率会非常高。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;代码:82c26b45de3ed5f70b38a0a9fc49fa75&#34;&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;

#define MAX 10001

int has_num[10];    //0-9在这个数中出现的次数

bool check()
{
    int deal_num[30];   //0-9每个数最多可以用3次，只需要30的空间
    int n = 0;
    //将所有出现过数依次存放在deal_num数组中
    for (int i=0; i&amp;lt;10; i++) {
        for (int j=0; j&amp;lt;has_num[i]; j++) {
            deal_num[n] = i;
            n++;
        }
    }

    //排列任意三个数组成一个整数，其值能被8整除，返回true，否则false
    for (int i=0; i&amp;lt;n; i++) {
        for (int j=0; j&amp;lt;n; j++) {
            if (j == i)
                continue;
            for (int k=0; k&amp;lt;n; k++) {
                if (k == i || k == j) {
                    continue;
                }
                if ((deal_num[i]*100 + deal_num[j]*10 + deal_num[k]) % 8 == 0)
                    return true;
            }
        }
    }
    return false;
}

int main()
{
    char str_num[MAX];  //用于保存不超过10000位的整数
    int n;
    long long temp = 0; //如果位数小于等于19，直接转换为64位整型

    for (;;) {
        memset(str_num, 0, sizeof(str_num));
        for (int i=0; i&amp;lt;10; i++) {
            has_num[i] = 0;
        }
        if (scanf(&amp;quot;%s&amp;quot;, &amp;amp;str_num) == 1) {
            n = strlen(str_num);
            //转换为64位整型
            if (n &amp;lt;= 19) {
                sscanf(str_num, &amp;quot;%lld&amp;quot;, &amp;amp;temp);
                if ((temp % 8) == 0)
                    printf(&amp;quot;YES\n&amp;quot;);
                else
                    printf(&amp;quot;NO\n&amp;quot;);
                continue;
            }
            
            //将0-9出现的次数保存在has_num数组中，最多3次
            for (int i=0; i&amp;lt;n; i++) {
                if (has_num[(int)str_num[i] - 48] &amp;lt; 3)
                    has_num[(int)str_num[i] - 48]++;
            }
            if (check())
                printf(&amp;quot;YES\n&amp;quot;);
            else
                printf(&amp;quot;NO\n&amp;quot;);
            continue;

        } else {
            break;
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    

  </channel>
</rss>
